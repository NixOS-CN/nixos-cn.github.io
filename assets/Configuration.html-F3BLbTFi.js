import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as e,b as a,d as s,e as p,r as l,o as c}from"./app-BEHVuCHF.js";const r={},u={class:"hint-container note"},d={href:"https://nixos.org/manual/nixos/stable/options.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://nixos.org/manual/nix/unstable/command-ref/nix-env.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://nixos.org/manual/nixos/stable/options.html#opt-users.users._name_.hashedPassword",target:"_blank",rel:"noopener noreferrer"},m={href:"http://X.org",target:"_blank",rel:"noopener noreferrer"};function g(b,n){const t=l("ExternalLinkIcon");return c(),o("div",null,[n[21]||(n[21]=e(`<h1 id="nixos-配置" tabindex="-1"><a class="header-anchor" href="#nixos-配置"><span>NixOS 配置</span></a></h1><div class="hint-container warning"><p class="hint-container-title">内容施工中</p><p>本节内容正在修缮中，当前内容可能已经过时，仅供参考。</p></div><h2 id="包管理" tabindex="-1"><a class="header-anchor" href="#包管理"><span>包管理</span></a></h2><p>这一节我们会讨论如何为你的系统添加额外的包。NixOS 包管理的方式有两种：</p><ul><li><p>配置文件声明。你可以在配置文件为系统或用户声明需要安装的包，每次你重新生成系统，NixOS 都会确保本地包含了你指定的这些包。这是持久的。</p></li><li><p>非持久环境。使用 <code>nix-env</code> 管理软件包安装，升级与卸载。这种方式允许不同软件仓库频道版本的包共存。这也是非 root 用户唯一安装软件包的方式。</p></li></ul><h3 id="声明式包管理" tabindex="-1"><a class="header-anchor" href="#声明式包管理"><span>声明式包管理</span></a></h3><p>在 <code>configuration.nix</code> 中， 提供用于声明系统环境包含的包的 <code>environment.systemPackages</code> 数组：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>environment<span class="token punctuation">.</span>systemPackages <span class="token operator">=</span> <span class="token punctuation">[</span> pkgs<span class="token punctuation">.</span>firefox <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment"># 将来源于 pkgs(Nixpkgs) 的包安装到系统</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><mark>配置文件并不是实时生效的</mark> 。你需要运行 <code>sudo nixos-rebuild switch</code> 来生成当前配置文件描述的系统。</p>`,9)),a("div",u,[n[3]||(n[3]=a("p",{class:"hint-container-title"},"依赖配置",-1)),a("p",null,[n[1]||(n[1]=s("对于某些包（例如依赖 D-Bus 或 systemd 服务注册的包），仅仅是安装还是不够的，我们需要为它们对系统进行一些配置。你可以访问",-1)),a("a",d,[n[0]||(n[0]=s("选项列表",-1)),p(t)]),n[2]||(n[2]=s("来检索需要启用的 NixOS 模块。",-1))])]),n[22]||(n[22]=e(`<p>你可以使用以下命令获取在线包仓库中可用的软件包的列表：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ nix-env <span class="token parameter variable">-qaP</span> <span class="token string">&#39;*&#39;</span> <span class="token parameter variable">--description</span>
nixos.firefox   firefox-23.0   Mozilla Firefox - the browser, reloaded
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常会输出很多行可以获取的包的信息。第一列输出是属性名（例如<code>nixos.firefox</code>）。</p><div class="hint-container note"><p class="hint-container-title">前缀</p><p><code>nixos</code> 前缀表明当前包是从 <code>nixos</code> 频道获取的。</p></div><p>如果你想卸载这个包，修改配置后重新生成系统即可。</p><h3 id="定制软件包" tabindex="-1"><a class="header-anchor" href="#定制软件包"><span>定制软件包</span></a></h3><p>一些软件包会提供一些禁用或启用功能，更改一些特性的选项。例如 Firefox 插件捆绑包（会额外提供一些诸如 Adobe Flash Player 的插件）会提供一个启用 Google Talk 的选项，如此配置便可以：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>nixpkgs<span class="token punctuation">.</span>config<span class="token punctuation">.</span>firefox<span class="token punctuation">.</span>enableGoogleTalkPlugin <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">难以查询</p><p>遗憾的是，Nixpkgs 依然无法提供一种简易查询这些选项的方式。</p></div><p>除了高阶选项外，你还可以以几乎任意方式调整软件包，例如更改或禁用软件包的依赖项。例如，Nixpkgs 中的 Emacs 软件包默认依赖于 GTK 2。如果你想将其构建为使用 GTK 3 的软件包，可以按如下方式指定：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>environment<span class="token punctuation">.</span>systemPackages <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">(</span>pkgs<span class="token punctuation">.</span>emacs<span class="token punctuation">.</span>override <span class="token punctuation">{</span> gtk <span class="token operator">=</span> pkgs<span class="token punctuation">.</span>gtk3<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们使用了 <code>override</code> 函数指定了用户定义的参数，意味着我们覆写了一部分原本的参数，构建的包也因此改变了。让我们来细看这个语句，<code>gtk</code> 默认是接受 <code>pkgs.gtk2</code> 参数的，我们使用 <code>pkgs.gtk3</code> 作输入的时候，默认参数已经失效了，于是构建出来的包是依赖 GTK 3 的了。</p><div class="hint-container warning"><p class="hint-container-title">运算优先级</p><p>圆括号是必要的，因为在 Nix 语言中，列表构造优先级高于函数。如果不使用括号，列表将会认为它接收了两个元素。</p></div><p>我们还可以使用 <code>overrideAttrs</code> 函数做出更多定制。<code>override</code> 函数的机制是覆写了包输入函数的参数，而 <code>overrideAttrs</code> 允许覆写传递给 <code>mkDerivation</code> 的属性。如此你几乎能修改这个包的方方面面，甚至包括源码。如果你想覆写源码输入，可以这样做：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>environment<span class="token punctuation">.</span>systemPackages <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">(</span>pkgs<span class="token punctuation">.</span>emacs<span class="token punctuation">.</span>overrideAttrs <span class="token punctuation">(</span>oldAttrs<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    name <span class="token operator">=</span> <span class="token string">&quot;emacs-25.0-pre&quot;</span><span class="token punctuation">;</span>
    src <span class="token operator">=</span> <span class="token url">/path/to/my/emacs/tree</span><span class="token punctuation">;</span>  <span class="token comment"># 你的源码目录</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>pkgs.emacs</code> 被衍生出了一个重新调用 <code>stdenv.mkDerivation</code> 并替换了 <code>name</code> 和 <code>src</code> 属性的版本。然后 <code>overrideAttrs</code> 接收了这个衍生，成为了目前系统环境的 <code>emacs</code> 包。</p><h3 id="添加自定义包" tabindex="-1"><a class="header-anchor" href="#添加自定义包"><span>添加自定义包</span></a></h3><h4 id="使用-nix-语言构建" tabindex="-1"><a class="header-anchor" href="#使用-nix-语言构建"><span>使用 Nix 语言构建</span></a></h4><h4 id="使用预构建文件" tabindex="-1"><a class="header-anchor" href="#使用预构建文件"><span>使用预构建文件</span></a></h4><p>大多数可执行文件都不能在 NixOS 上直接工作，但是将依赖一起打包的容器格式就可以，常见的容器格式有 <code>flatpaks</code> 和 <code>AppImages</code> 等。</p><h3 id="非持久包管理-ad-hoc-包管理" tabindex="-1"><a class="header-anchor" href="#非持久包管理-ad-hoc-包管理"><span>非持久包管理（Ad-Hoc 包管理）</span></a></h3><p>这种方式不持久是相对于声明式包管理的。声明式包管理可以保证系统的一致性和可复制性，所以是持久的。不过 Ad-Hoc 方式非常灵活。</p><div class="hint-container tip"><p class="hint-container-title">Ad-Hoc</p><p>这个词语的起源是拉丁语，意思是“为此”。它通常表示一种针对特定目的，问题或任务的解决方案，而不是一种可以适用于其他情况的通用解决方案。例如，一个政府为了解决一个具体问题而设立的委员会就是一个 ad-hoc 委员会。更宽松地说，它也可以意味着“自发的 ”，“未计划的”或“即兴的”。</p><p>在 nixos 中，Ad-Hoc 的意义是指可以在一个临时的 shell 环境中使用任何用 nix 打包的程序，而不需要永久地安装它。这样可以方便地创建和使用开发环境，而不影响系统的状态。</p></div><p>通过 <code>nix-env</code> 命令，你可以像常规发行版那样使用命令安装软件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nix-env <span class="token parameter variable">-iA</span> nixos.thunderbird
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果以 root 权限执行此语句，软件包将会被安装到 <code>/nix/var/nix/profiles/default</code>，并且对所有用户可见。如果你是普通用户，软件包将会安装到<code>/nix/var/nix/profiles/per-user/username/profile</code>，并且仅对当前用户可见。<code>-A</code> 参数指定了软件包所属的属性，如果不带属性，直接匹配 <code>thunderbird</code> 速度会较慢，同时也可能匹配到多个名称相同的包，产生歧义。</p><p>假设我们需要更新的包来自于系统频道，我们可以先更新系统频道，然后重新安装或更新指定包：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nix-channel <span class="token parameter variable">--update</span> nixos  <span class="token comment"># 更新系统频道</span>
nix-env <span class="token parameter variable">-iA</span> nixos.thunderbird  <span class="token comment"># 再次安装时，此包会被替换为最新版</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的语句可以指定另外的频道，从而用不同频道的包去代替当前包。如果你想用当前包默认的来源升级包，尝试这样做：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nix-channel <span class="token parameter variable">--update</span> nixos
nix-env <span class="token parameter variable">-u</span> thunderbird
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想升级所有包，可以这样：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nix-env <span class="token parameter variable">-u</span> <span class="token string">&#39;*&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是需要注意， <mark>它并不会升级系统配置中描述的包</mark> ，那些包由 <code>nixos-rebuild switch</code> 命令管理。</p><p>如果你想更新那些包， <code>nixos-rebuild switch --upgrade</code> 即可，它会自动更新频道并更新系统生成。</p><p>如果你想卸载使用命令安装的包，使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nix-env <span class="token parameter variable">-e</span> thunderbird
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，用户环境的状态是可以回滚的：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nix-env <span class="token parameter variable">--rollback</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,38)),a("p",null,[n[5]||(n[5]=s("你可以查阅 ",-1)),a("a",v,[n[4]||(n[4]=s("nix-env 手册页",-1)),p(t)]),n[6]||(n[6]=s("获取更多信息。",-1))]),n[23]||(n[23]=e(`<h2 id="用户管理" tabindex="-1"><a class="header-anchor" href="#用户管理"><span>用户管理</span></a></h2><p>类似的，NixOS 支持声明式用户管理和命令行用户管理。</p><h3 id="声明式用户管理" tabindex="-1"><a class="header-anchor" href="#声明式用户管理"><span>声明式用户管理</span></a></h3><p>我们以下面的例子说明声明式用户管理的大致细节：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>users<span class="token punctuation">.</span>users<span class="token punctuation">.</span>alice <span class="token operator">=</span> <span class="token punctuation">{</span>
  isNormalUser <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  home <span class="token operator">=</span> <span class="token string">&quot;/home/alice&quot;</span><span class="token punctuation">;</span>
  description <span class="token operator">=</span> <span class="token string">&quot;Alice Foobar&quot;</span><span class="token punctuation">;</span>
  extraGroups <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;wheel&quot;</span> <span class="token string">&quot;networkmanager&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
  openssh<span class="token punctuation">.</span>authorizedKeys<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;ssh-dss AAAAB3Nza... alice@foobar&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据描述，该用户加入了 <code>wheel</code> 组，意味着它可以使用 <code>sudo</code> 命令提权，此外它还加入了 <code>networkmanager</code> 组，意味着该用户可以配置网络。不过这样创建出来的用户是没有初始密码的，你仍需要使用 <code>passwd</code> 命令为其分配密码， <mark>每次重新生成系统的时候不会影响到密码的状态</mark> 。对于 ssh 连接，你可以指定认证密钥，只要公钥与私钥匹配就能连接。</p>`,6)),a("p",null,[n[8]||(n[8]=s("如果你设置 ",-1)),n[9]||(n[9]=a("code",null,"users.mutableUsers",-1)),n[10]||(n[10]=s(" 为 ",-1)),n[11]||(n[11]=a("code",null,"False",-1)),n[12]||(n[12]=s(" ，",-1)),n[13]||(n[13]=a("code",null,"/etc/passwd",-1)),n[14]||(n[14]=s(" 与 ",-1)),n[15]||(n[15]=a("code",null,"/etc/group",-1)),n[16]||(n[16]=s(" 目录的内容将与配置文件中描述的一致。例如，如果你从配置文件中删除了某位用户，然后重新生成系统，这个用户就真实消失了。同时通过命令行管理用户的方式将失效。不过你仍然可以通过设置用户的",-1)),a("a",k,[n[7]||(n[7]=a("code",null,"hashedPassword",-1)),p(t)]),n[17]||(n[17]=s(" 选项来分配密码。",-1))]),n[24]||(n[24]=e(`<p>用户 <code>uid</code> 是自动分配的，不过你也可以自行指定：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>uid <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>gid</code> 分配也是自动的，同样可以用户定义，也是类似的方法：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>users<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>students<span class="token punctuation">.</span>gid <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="命令行式用户管理" tabindex="-1"><a class="header-anchor" href="#命令行式用户管理"><span>命令行式用户管理</span></a></h3><p>创建一个名为 <code>alice</code> 的用户，<code>-m</code> 参数用于给该用户创建 <code>home</code> 目录：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">useradd</span> <span class="token parameter variable">-m</span> alice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了让 nix 工具集可以为该用户所用，我们还需要给这个用户打开 login shell（加载用户配置的 shell）。这一步会把 <code>~/.nix-defexpr</code> 链接到该用户的目录，这样该用户才能使用 nix 的一系列命令。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">su</span> - alice <span class="token parameter variable">-c</span> <span class="token string">&quot;true&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们还需要为其分配密码，才能登录：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">passwd</span> alice
Enter new UNIX password: ***
Retype new UNIX password: ***
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>userdel -r alice</code> 删除该用户，<code>-r</code> 参数用于移除该用户的 <code>home</code> 目录。此外还有 <code>usermod</code>，<code>groupadd</code>, <code>groupmod</code> 和 <code>groupdel</code> 可以使用。</p><h2 id="文件系统" tabindex="-1"><a class="header-anchor" href="#文件系统"><span>文件系统</span></a></h2><p>你可以使用 <code>fileSystems</code> 来配置文件系统，然后按照挂载点配置文件系统，分区的参数等等：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>fileSystems<span class="token punctuation">.</span><span class="token string">&quot;/data&quot;</span> <span class="token operator">=</span>
  <span class="token punctuation">{</span> device <span class="token operator">=</span> <span class="token string">&quot;/dev/disk/by-label/data&quot;</span><span class="token punctuation">;</span>
    fsType <span class="token operator">=</span> <span class="token string">&quot;ext4&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这条配置生成 <code>/etc/fstab</code>，系统在开机时会根据这个表文件来挂载分区。</p><p><code>device</code> 不一定要根据 <code>label</code> 来指定，也可以通过 <code>uuid</code> 。</p><div class="hint-container tip"><p class="hint-container-title">块的 UUID</p><p>你可以用下面的方法查看到这些块的 UUID：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>tritium@KOVA ~<span class="token operator">&gt;</span> lsblk <span class="token parameter variable">-o</span> name,mountpoint,size,uuid
NAME
    MOUNTPOINT         SIZE UUID
sda                  <span class="token number">363</span>.3M
sdb <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>               2G 1159b63e-3072-4483-b374-78cd487e6460
sdc                      1T 8108c250-d488-4724-9237-5d926569fbef
sdd /mnt/wslg/distro     1T 8677e11d-56ab-4ecb-8dfd-8effb322493f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>在默认情况下，所有被写在配置的分区都会被自动挂载，除非你指定了 <code>noauto</code> 的选项：</p><p>你也可以缺省 <code>fsType</code> 的值，因为它会自动检测文件系统类型。</p><div class="hint-container tip"><p class="hint-container-title">nofail</p><p>如果 <code>fstab</code> 内容有误，系统会在启动时显示令人窒息的急救 Shell。为了避免这种情况，你可以在 <code>option</code> 里加入 <code>nofail</code> 来确保挂载是异步的且不会严重影响启动。</p></div><h2 id="显示系统" tabindex="-1"><a class="header-anchor" href="#显示系统"><span>显示系统</span></a></h2><p>X 窗口系统已经是上个世纪八十年代的软件了，冗余的功能拖累了它的性能，因此建议没有特殊需求的用户勇敢试水 Wayland。</p><h3 id="x11" tabindex="-1"><a class="header-anchor" href="#x11"><span>X11</span></a></h3><p>X 窗口系统可以提供最基础，成熟（稍微过时）的显示服务，只需要以下配置就能启用：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它会自动检测并启用适合的 xorg 驱动，比如 <code>mesa</code> 和 <code>xf86</code> 系列驱动。当然你也可以手动指定：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>videoDrivers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;r128&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过以上配置就启用了 <code>xf86-video-r128</code> 驱动。</p><p>然后你应该至少启用一个桌面管理器或窗口管理器。我通常为新手和不喜欢折腾的人推荐桌面管理器，窗口管理器为装逼和喜欢效率的极客所用。</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token comment">#  挑一个喜欢的吧</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>desktopManager<span class="token punctuation">.</span>plasma5<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>desktopManager<span class="token punctuation">.</span>xfce<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>desktopManager<span class="token punctuation">.</span>gnome<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>desktopManager<span class="token punctuation">.</span>mate<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>windowManager<span class="token punctuation">.</span>xmonad<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>windowManager<span class="token punctuation">.</span>twm<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>windowManager<span class="token punctuation">.</span>icewm<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>windowManager<span class="token punctuation">.</span>i3<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>windowManager<span class="token punctuation">.</span>herbstluftwm<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NixOS 的默认显示管理器是 LightDM（它只在 X11 下工作），你也可以自行选择替代品：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>displayManager<span class="token punctuation">.</span>sddm<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment"># KDE 的默认登录管理器</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>displayManager<span class="token punctuation">.</span>gdm<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment"># GNOME 的默认登陆管理器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以指定 x11 的键盘布局：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>layout <span class="token operator">=</span> <span class="token string">&quot;de&quot;</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>xkbVariant <span class="token operator">=</span> <span class="token string">&quot;neo&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>并且 x11 显示服务可以被手动启用或重启：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>systemctl restart <span class="token operator">-</span><span class="token operator">-</span>now display<span class="token operator">-</span>manager<span class="token punctuation">.</span>service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 64 位系统上，如果你想运行 32 位的 OpenGL 程序（比如 Wine）。你应该这样配置：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>hardware<span class="token punctuation">.</span>opengl<span class="token punctuation">.</span>driSupport32Bit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="自动登录" tabindex="-1"><a class="header-anchor" href="#自动登录"><span>自动登录</span></a></h4><p>如果你的电脑不需要限制其他人访问，你可以设置自动登录来跳过恼人的用户登录界面。在下面的例子中，我们定义了默认的会话，以便于自动登录到它：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>displayManager<span class="token punctuation">.</span>defaultSession <span class="token operator">=</span> <span class="token string">&quot;none+i3&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>格式是“桌面环境”+“窗口管理器”，但是光配置默认会话还不够，还需要将开启自动登陆的布尔值传递给显示管理器，并指定自动登录的用户是谁：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>displayManager<span class="token punctuation">.</span>lightdm<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>displayManager<span class="token punctuation">.</span>autoLogin<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>displayManager<span class="token punctuation">.</span>autoLogin<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token string">&quot;alice&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="intel-图形驱动" tabindex="-1"><a class="header-anchor" href="#intel-图形驱动"><span>Intel 图形驱动</span></a></h4><p>通常有两种驱动供 Intel 核心显卡用户选择：<code>modesetting</code> 与 <code>xf86-video-intel</code>。按照正常人的脑子想，肯定是带有 <code>intel</code> 的专用驱动性能和稳定性更佳，但实际情况是，后者缺乏维护，过时且不稳定。</p><p><code>modesetting</code> 是一种运行在 KMS（Kernel Mode Setting）的通用驱动：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>videoDrivers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;modesetting&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想启用定制驱动，也不是不可以：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>videoDrivers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;intel&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样你就启用了 <code>xf86-video-intel</code> 驱动。</p><p>如果你遇到屏幕撕裂的问题，尝试以下设置：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>videoDrivers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;intel&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>deviceSection <span class="token operator">=</span> <span class="token string">&#39;&#39;
  Option &quot;DRI&quot; &quot;2&quot;
  Option &quot;TearFree&quot; &quot;true&quot;
&#39;&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果上面的改动不生效，也有可能是 Intel 自刷新适应的锅，在内核启动参数里加上 <code>i915.enable_psr=0</code> 也许会修复这种屏幕只刷新一半的情况（通常出现在机械革命 F1，联想 Yoga 14s 等机型上）。</p><h4 id="nvdia-闭源驱动" tabindex="-1"><a class="header-anchor" href="#nvdia-闭源驱动"><span>NVDIA 闭源驱动</span></a></h4><p>皮衣客打死不做个能用的开源黄伟达驱动。由于专有驱动不自由，所以你需要手动启用它：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>videoDrivers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;nvidia&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你的显卡很老了，那可能需要老驱动才能驱动它：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>videoDrivers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;nvidiaLegacy390&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>videoDrivers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;nvidiaLegacy340&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>videoDrivers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;nvidiaLegacy304&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="nvdia-开源驱动" tabindex="-1"><a class="header-anchor" href="#nvdia-开源驱动"><span>NVDIA 开源驱动</span></a></h4><ul><li>nvdia 不公开其显卡的硬件规格和编程接口，导致开源驱动开发者无法完全利用显卡的功能和性能。</li><li>nvdia 为其专有驱动添加了一些安全机制，如签名验证，固件加密等，使得开源驱动无法加载或修改这些驱动。</li></ul><p>nouveau 就是那个自由和开源的驱动 NVIDA 显卡的程序。nouveau 的目标是利用逆向工程 Nvidia 的专有 Linux 驱动程序来创建一个开放源码的驱动程序。</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>videoDrivers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;nouveau&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>“nouveau” 是法语中的 “新的” 的意思。</p></blockquote><p>效果见仁见智吧，反正 NVDIA 显卡的 Linux 用户日常没人权。</p><h4 id="amd-闭源驱动" tabindex="-1"><a class="header-anchor" href="#amd-闭源驱动"><span>AMD 闭源驱动</span></a></h4><p>AMD 的闭源驱动经常会坏掉，不建议使用：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>videoDrivers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;amdgpu-pro&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>建议用下面的开源驱动。</p><h4 id="amd-开源驱动" tabindex="-1"><a class="header-anchor" href="#amd-开源驱动"><span>AMD 开源驱动</span></a></h4><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>videoDrivers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;amdgpu&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="触控板" tabindex="-1"><a class="header-anchor" href="#触控板"><span>触控板</span></a></h4><p>笔记本电脑通常会带有触控板，启用配置如下：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>libinput<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个驱动还有很多可配置的功能，例如关闭“触碰以点击”功能：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>libinput<span class="token punctuation">.</span>touchpad<span class="token punctuation">.</span>tapping <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">废弃的 synaptics 选项</p><p><code>services.xserver.synaptics</code> 选项在 NixOS 17.09 之后的版本中被废弃。</p></div><h4 id="gtk-qt-主题" tabindex="-1"><a class="header-anchor" href="#gtk-qt-主题"><span>GTK/QT 主题</span></a></h4><p>所有的主题你可以去仓库里找到。如果你想让 QT 和 GTK 的主题一致一些：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>qt<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
qt<span class="token punctuation">.</span>platformTheme <span class="token operator">=</span> <span class="token string">&quot;gtk2&quot;</span><span class="token punctuation">;</span>
qt<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&quot;gtk2&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义键盘布局-xkb" tabindex="-1"><a class="header-anchor" href="#自定义键盘布局-xkb"><span>自定义键盘布局（XKB）</span></a></h4><p>这是一个例子，在这个例子中，我们稍微改造一下美式键盘。我们先创建一个文件<code>us-greek</code>，放到一个 <code>symbols</code> 文件夹下面，在里面描述自定义的键位：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>xkb_symbols <span class="token string">&quot;us-greek&quot;</span>
<span class="token punctuation">{</span>
  include <span class="token string">&quot;us(basic)&quot;</span>            <span class="token operator">//</span> 包含基础美式键盘
  include <span class="token string">&quot;level3(ralt_switch)&quot;</span>  <span class="token operator">//</span> 配置右 alt 作为一个第三级开关

  key <span class="token operator">&lt;</span>LatA<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span> a<span class="token punctuation">,</span> A<span class="token punctuation">,</span> Greek_alpha <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  key <span class="token operator">&lt;</span>LatB<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span> b<span class="token punctuation">,</span> B<span class="token punctuation">,</span> Greek_beta  <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  key <span class="token operator">&lt;</span>LatG<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span> g<span class="token punctuation">,</span> G<span class="token punctuation">,</span> Greek_gamma <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  key <span class="token operator">&lt;</span>LatD<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span> d<span class="token punctuation">,</span> D<span class="token punctuation">,</span> Greek_delta <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  key <span class="token operator">&lt;</span>LatZ<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span> z<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> Greek_zeta  <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个最小键盘布局还需要以下内容：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>extraLayouts<span class="token punctuation">.</span>us<span class="token operator">-</span>greek <span class="token operator">=</span> <span class="token punctuation">{</span>
  description <span class="token operator">=</span> <span class="token string">&quot;US layout with alt-gr greek&quot;</span><span class="token punctuation">;</span>
  languages   <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;eng&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
  symbolsFile <span class="token operator">=</span> <span class="token url">/yourpath/symbols/us-greek</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>extraLayouts.</code> 后的名称应该与布局名匹配。</p><p>但是你要知道，你写的 XKB 布局要是坏的，X 显示系统会崩掉的，所以强烈建议先测试再实装：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>nix<span class="token operator">-</span>shell <span class="token operator">-</span>p xorg<span class="token punctuation">.</span>xkbcomp
setxkbmap <span class="token url">-I/yourpath</span> us<span class="token operator">-</span>greek <span class="token operator">-</span>print | xkbcomp <span class="token url">-I/yourpath</span> <span class="token operator">-</span> $DISPLAY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以从预置的 XKB 文件获取获取灵感：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>echo <span class="token string">&quot;$(nix-build --no-out-link &#39;&lt;nixpkgs&gt;&#39; -A xorg.xkeyboardconfig)/etc/X11/xkb/&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更改配置以后，你需要注销再登录才能生效。 然后你键入 <code>setxkbmap us-greek</code> 并键入 Alt + a（可能在你的终端不会立马生效）。如果你要更改默认行为，还是配置一下<code>services.xserver.layout</code>。</p><p>一个布局可以拥有除了 <code>xkb_symbols</code> 以外的数个其他组件，比如我们可以为一些键码绑定多媒体功能。我们可以通过使用 <code>pkgs.xorg.xev</code> 来找到中意的按键的码，然后再创建定义：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>xkb_keycodes <span class="token string">&quot;media&quot;</span>
<span class="token punctuation">{</span>
 <span class="token operator">&lt;</span>volUp<span class="token operator">&gt;</span>   <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
 <span class="token operator">&lt;</span>volDown<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们来引入刚刚新定义的键码：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>xkb_symbols <span class="token string">&quot;media&quot;</span>
<span class="token punctuation">{</span>
 key<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;ONE_LEVEL&quot;</span><span class="token punctuation">;</span>
 key <span class="token operator">&lt;</span>volUp<span class="token operator">&gt;</span>   <span class="token punctuation">{</span> <span class="token punctuation">[</span> XF86AudioLowerVolume <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
 key <span class="token operator">&lt;</span>volDown<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span> XF86AudioRaiseVolume <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里完成总装：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>services<span class="token punctuation">.</span>xserver<span class="token punctuation">.</span>extraLayouts<span class="token punctuation">.</span>media <span class="token operator">=</span> <span class="token punctuation">{</span>
  description  <span class="token operator">=</span> <span class="token string">&quot;Multimedia keys remapping&quot;</span><span class="token punctuation">;</span>
  languages    <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;eng&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
  symbolsFile  <span class="token operator">=</span> <span class="token url">/path/to/media-key</span><span class="token punctuation">;</span>
  keycodesFile <span class="token operator">=</span> <span class="token url">/path/to/media-sym</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的两个自定义目录用于引用上面的两个 nix 模块。</p><h3 id="wayland" tabindex="-1"><a class="header-anchor" href="#wayland"><span>Wayland</span></a></h3>`,99)),a("p",null,[n[19]||(n[19]=s("X11 其实是一种显示协议，",-1)),a("a",m,[n[18]||(n[18]=s("X.org",-1)),p(t)]),n[20]||(n[20]=s(" 才是显示服务器。Wayland 作为新生的显示服务器，非常缺乏生态，只能用某些方式才能部分兼容 X11。尽管如此，还是希望所有人能加入 Wayland 的阵营。",-1))]),n[25]||(n[25]=e(`<p>X11 在设计之初就分为了服务端与窗口管理器，而一个 Wayland 混成器则类似 X 窗口管理器里内置了 服务端的功能，这样的设计让 Wayland 在本机体验上有了不少的提升。</p><p>Sway 是一个支持 Wayland 的窗口管理器，类似的软件还有 Wayfire，Hyprland 等：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>programs<span class="token punctuation">.</span>sway<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你使用基于 wlroot 的窗口管理器，并且有共享屏幕或录制屏幕的需求，记得启用的 wlr 对应的 portal。</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>xdg<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>wlr<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与之相关的还有 <code>services.pipewire.enable</code>。</p><h2 id="gpu-加速" tabindex="-1"><a class="header-anchor" href="#gpu-加速"><span>GPU 加速</span></a></h2><p>为了能够流畅的硬件解码视频，加速图形渲染等，我们需要配置一些常见的硬件加速 API。</p><h2 id="桌面环境" tabindex="-1"><a class="header-anchor" href="#桌面环境"><span>桌面环境</span></a></h2><h3 id="xfce" tabindex="-1"><a class="header-anchor" href="#xfce"><span>XFCE</span></a></h3><h3 id="gnome" tabindex="-1"><a class="header-anchor" href="#gnome"><span>GNOME</span></a></h3><h3 id="kde" tabindex="-1"><a class="header-anchor" href="#kde"><span>KDE</span></a></h3>`,12))])}const f=i(r,[["render",g],["__file","Configuration.html.vue"]]),q=JSON.parse('{"path":"/manual/Configuration.html","title":"NixOS 配置","lang":"zh-CN","frontmatter":{"description":"NixOS 配置 内容施工中 本节内容正在修缮中，当前内容可能已经过时，仅供参考。 包管理 这一节我们会讨论如何为你的系统添加额外的包。NixOS 包管理的方式有两种： 配置文件声明。你可以在配置文件为系统或用户声明需要安装的包，每次你重新生成系统，NixOS 都会确保本地包含了你指定的这些包。这是持久的。 非持久环境。使用 nix-env 管理软件包...","head":[["meta",{"property":"og:url","content":"https://nixos-cn.github.io/manual/Configuration.html"}],["meta",{"property":"og:site_name","content":"NixOS 中文"}],["meta",{"property":"og:title","content":"NixOS 配置"}],["meta",{"property":"og:description","content":"NixOS 配置 内容施工中 本节内容正在修缮中，当前内容可能已经过时，仅供参考。 包管理 这一节我们会讨论如何为你的系统添加额外的包。NixOS 包管理的方式有两种： 配置文件声明。你可以在配置文件为系统或用户声明需要安装的包，每次你重新生成系统，NixOS 都会确保本地包含了你指定的这些包。这是持久的。 非持久环境。使用 nix-env 管理软件包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-05T13:58:51.000Z"}],["meta",{"property":"article:author","content":"NixOS-CN"}],["meta",{"property":"article:modified_time","content":"2024-07-05T13:58:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NixOS 配置\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-05T13:58:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"NixOS-CN\\",\\"url\\":\\"https://github.com/nixos-cn\\"}]}"]]},"headers":[{"level":2,"title":"包管理","slug":"包管理","link":"#包管理","children":[{"level":3,"title":"声明式包管理","slug":"声明式包管理","link":"#声明式包管理","children":[]},{"level":3,"title":"定制软件包","slug":"定制软件包","link":"#定制软件包","children":[]},{"level":3,"title":"添加自定义包","slug":"添加自定义包","link":"#添加自定义包","children":[]},{"level":3,"title":"非持久包管理（Ad-Hoc 包管理）","slug":"非持久包管理-ad-hoc-包管理","link":"#非持久包管理-ad-hoc-包管理","children":[]}]},{"level":2,"title":"用户管理","slug":"用户管理","link":"#用户管理","children":[{"level":3,"title":"声明式用户管理","slug":"声明式用户管理","link":"#声明式用户管理","children":[]},{"level":3,"title":"命令行式用户管理","slug":"命令行式用户管理","link":"#命令行式用户管理","children":[]}]},{"level":2,"title":"文件系统","slug":"文件系统","link":"#文件系统","children":[]},{"level":2,"title":"显示系统","slug":"显示系统","link":"#显示系统","children":[{"level":3,"title":"X11","slug":"x11","link":"#x11","children":[]},{"level":3,"title":"Wayland","slug":"wayland","link":"#wayland","children":[]}]},{"level":2,"title":"GPU 加速","slug":"gpu-加速","link":"#gpu-加速","children":[]},{"level":2,"title":"桌面环境","slug":"桌面环境","link":"#桌面环境","children":[{"level":3,"title":"XFCE","slug":"xfce","link":"#xfce","children":[]},{"level":3,"title":"GNOME","slug":"gnome","link":"#gnome","children":[]},{"level":3,"title":"KDE","slug":"kde","link":"#kde","children":[]}]}],"git":{"createdTime":1711468225000,"updatedTime":1720187931000,"contributors":[{"name":"Ryan Yin","email":"xiaoyin_c@qq.com","commits":3},{"name":"Tatooi Noyo","email":"tatooi.noyo@outlook.com","commits":2}]},"readingTime":{"minutes":14.36,"words":4309},"filePathRelative":"manual/Configuration.md","localizedDate":"2024年3月26日","autoDesc":true,"excerpt":"\\n<!-- prettier-ignore -->\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">内容施工中</p>\\n<p>本节内容正在修缮中，当前内容可能已经过时，仅供参考。</p>\\n<!-- prettier-ignore -->\\n</div>\\n<h2>包管理</h2>\\n<p>这一节我们会讨论如何为你的系统添加额外的包。NixOS 包管理的方式有两种：</p>\\n<ul>\\n<li>\\n<p>配置文件声明。你可以在配置文件为系统或用户声明需要安装的包，每次你重新生成系统，NixOS 都会确保本地包含了你指定的这些包。这是持久的。</p>\\n</li>\\n<li>\\n<p>非持久环境。使用 <code>nix-env</code> 管理软件包安装，升级与卸载。这种方式允许不同软件仓库频道版本的包共存。这也是非 root 用户唯一安装软件包的方式。</p>\\n</li>\\n</ul>"}');export{f as comp,q as data};
