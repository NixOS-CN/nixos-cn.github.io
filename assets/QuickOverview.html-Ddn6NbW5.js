import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as t,b as a,d as s,e as i,r as o,o as c}from"./app-nGVXp2QS.js";const d={},r={href:"https://nixos.org/manual/nix/unstable/command-ref/env-common.html?highlight=nix_path#env-NIX_PATH",target:"_blank",rel:"noopener noreferrer"},u={href:"https://nixos.org/manual/nix/stable/language/operators.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://nixos.org/manual/nix/stable/language/builtins.html",target:"_blank",rel:"noopener noreferrer"};function k(m,n){const e=o("ExternalLinkIcon");return c(),l("div",null,[n[21]||(n[21]=t(`<h1 id="nix-语言快速入门" tabindex="-1"><a class="header-anchor" href="#nix-语言快速入门"><span>Nix 语言快速入门</span></a></h1><div class="hint-container warning"><p class="hint-container-title">基础要求</p><p>以下教程需要你具有一定基础。具体来说，如果你已经知道在编程领域什么是变量（variable）、赋值（assign）、字符串（string）、函数（function）及参数（argument），那么你的知识水平就差不多足够了。</p></div><details><summary>仅面向本文维护者的说明，单击以切换折叠/展开</summary> 本文在设计上是线性的，也即只需要读者具备一点点基础，就可以通过按顺序从头读到尾的方式完成本文的学习。因此，请留心说明顺序，例如讲 let 绑定时如果举了一个列表的例子，你需要确保前面已经正式介绍过列表。再如，讲 with 语法糖的时候同时用到 let 绑定和列表，那么这两个概念都需要在前面已经正式介绍过。否则，读者很可能会面对初次接触的语法或者概念而被卡住，这会严重影响学习效率甚至是完成率。若出于顺序安排的其他合理性原因，实在无法避开在说明中涉及陌生概念，可以提示读者相关部分不需要理解，后面会讲到。 </details><p>Nix 作为语言，是一门简单的函数式语言，它被专门设计并用于 Nix 包管理器及相关生态（NixOS、Home-Manager 等）。</p><h2 id="实践环境" tabindex="-1"><a class="header-anchor" href="#实践环境"><span>实践环境</span></a></h2><p>在学习 Nix 语言时，虽然不是必须，但若动手实践，效率往往会高得多。</p><p>以下给出两种实践方法。这不是必须的，你也可以跳过本节。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>本节需要你已经安装了 Nix 或正在使用 NixOS。</p><p>另外，本教程中的示例代码一般不是为了供直接运行而写的。对于每一段代码，若想实践其效果，请先理解对应的知识，再基于这段代码自己编写测试代码以运行。</p><p>（对于 Nix 来说，运行代码被称为<strong>求值</strong>（evaluate），而只有<strong>表达式</strong>（expression）能被求值；但是，示例的代码未必是表达式，而可能是属性集的元素等。）</p></div><h3 id="交互模式" tabindex="-1"><a class="header-anchor" href="#交互模式"><span>交互模式</span></a></h3><p>你可以通过在命令行运行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nix repl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入交互模式，其界面类似下面的样子：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>Nix 2.31.1
Type :? for help.
nix-repl&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时输入表达式，例如</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>回车，得到输出结果如下：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>输入 <code>:q</code> 可以退出交互模式。</p></div><h3 id="文件求值" tabindex="-1"><a class="header-anchor" href="#文件求值"><span>文件求值</span></a></h3><p>交互模式简单快捷，但我们平时使用 Nix 语言进行编辑配置、打包等操作时，大多数情况下不会直接使用交互模式，而是对 <code>*.nix</code> 纯文本文件进行编辑。</p><p>因此，如果你习惯于使用编辑器，这里更推荐利用文件求值进行实践。</p><p>例如，新建文件 <code>foo.nix</code>，将其内容编辑如下：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>保存后，在命令行运行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nix-instantiate <span class="token parameter variable">--eval</span> foo.nix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如下：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">拓展说明：求值的惰性与嵌套迭代</p><p>此部分内容较长，仅供有兴趣的人阅读。</p><details><summary>单击以切换折叠/展开</summary><p>Nix 的求值具有惰性（laziness），只会在有必要时进行。例如，下述代码（看不懂没关系）将 <code>a</code> 的值赋为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>2</mn><mn>0</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\\dfrac{2}{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，这是一种典型的数学错误：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">builtins</span><span class="token punctuation">.</span><span class="token function">div</span> <span class="token number">2</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">in</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行它所得结果为 <code>3</code>，竟然不会报错？实际上，这正是因为 <code>a</code> 的值不被需要（只需要输出 <code>b</code> 的值），所以也未被求值。</p><hr><p>与惰性类似的是另一种行为是，嵌套集合的求值，在交互模式和文件求值模式下，除非必要，默认不会迭代，而是以占位符替代，例如</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用交互模式，结果如下</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>{
  a = { ... };
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用文件求值的结果如下</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>{ a = &lt;CODE&gt;; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过，与惰性不同，迭代求值的行为可以直接控制。</p><ul><li>交互模式：在开头添加 <code>:p</code>，例如 <code>:p { a.b.c = 1; }</code>。</li><li>文件求值：添加 <code>--strict</code> 参数，例如<code>nix-instantiate --eval --strict foo.nix</code>。</li></ul><p>结果如下：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>{
  a = {
    b = { c = 1; };
  };
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></div><p><strong>好了，下面正式介绍 Nix 语法。</strong></p><h2 id="注释、缩进与换行" tabindex="-1"><a class="header-anchor" href="#注释、缩进与换行"><span>注释、缩进与换行</span></a></h2><p>注释、缩进与换行的语法与机制，对编程语言的风格有重要影响。本节将介绍 Nix 语言中的注释、缩进与换行。</p><ul><li>注释：在 Nix 语言中，用 <code>#</code> 表示注释，在它之后直到行末的部分都会被忽略。</li><li>缩进与换行：与 Python 这种对缩进有要求的语言不同，在 Nix 语言中，大多数情况下，换行与缩进只是为了更好的可读性，并不影响代码的本质。</li></ul><p>例如，下面有两段示例代码（你目前还不需要理解它们的含义），它们在本质上（也即在 Nix 解释器看来）并没有区别。</p><p>第一例：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>foo <span class="token operator">=</span> <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二例：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>foo <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token comment"># 这是一句注释，放在代码末尾。</span>
  <span class="token comment"># 这也是一句注释，单独占了一行。</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment"># 这里即使不缩进，也不影响代码本质。</span>
  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
  <span class="token comment"># c = 3;  # 这里的代码被注释掉了，相当于不存在。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>换行与空格一样具有分隔作用，请勿在不可分隔的地方胡乱断行。</p></div><h2 id="赋值与集合" tabindex="-1"><a class="header-anchor" href="#赋值与集合"><span>赋值与集合</span></a></h2><p>与大多数编程语言类似，变量与值是 Nix 语言中最基础的概念。本节将会介绍 Nix 中如何为变量<strong>赋值</strong>，以及最常用的数据类型——<strong>属性集</strong>，继而引出<strong>递归属性集</strong>与<strong>列表</strong>的概念。</p><h3 id="名称和值" tabindex="-1"><a class="header-anchor" href="#名称和值"><span>名称和值</span></a></h3><p>我们可以使用 <code>=</code> 为名称绑定值，形成赋值语句。例如将名称 <code>foo</code> 赋值为 <code>123</code>：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>foo <span class="token operator">=</span> <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">名称与其它语言中变量的区别</p><p>在很多语言中，赋值会改变变量的状态，而 Nix 语言中的名称一旦赋值（定义）就无法改变。</p><p>不过，将 Nix 中的名称称为变量也没问题。</p></div><p>名称的值并不仅限于 <code>123</code> 这种整数。具体来说有以下类型（不需要完全理解，留下印象即可）</p><ul><li>字符串（string），例如 <code>&quot;Hello world&quot;</code></li><li>整数（integer），例如 <code>1</code></li><li>浮点数（float），例如 <code>3.141</code></li><li>布尔（bool），只有 <code>true</code> 与 <code>false</code> 两种</li><li>null，只有 <code>null</code> 一种</li><li>列表（list），例如 <code>[ 1 &quot;tux&quot; false ]</code></li><li>属性集（attribute set），例如 <code>{ a = 1; b = &quot;tux&quot;; c = false; }</code></li></ul><h3 id="属性集" tabindex="-1"><a class="header-anchor" href="#属性集"><span>属性集</span></a></h3><p>在 Nix 语法中，属性集（简称集合）是最常见的数据类型之一，基本示例如下：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>概念说明：</p><ul><li>属性集（attribute set）就是装载若干对<strong>名称与值</strong>的集合。</li><li>集合内的名称被称为这个集合的<strong>属性</strong>（attribute）；</li><li>集合内由名称和值组成的对被称为该属性的<strong>元素</strong>（element）；</li></ul><p>语法说明：</p><ul><li>集合以 <code>{</code> <code>}</code> 为边界，其内部为多个赋值语句，且各个赋值语句末尾必须添加 <code>;</code> 。</li></ul><p>上述代码将 <code>foo</code> 的值定义为集合 <code>{ a = 1; b = 2; }</code> ，因此可称之为集合 <code>foo</code> 。</p><p>集合 <code>foo</code> 中有两个属性：</p><ul><li>属性 <code>a</code>，其值为 <code>1</code></li><li>属性 <code>b</code>，其值为 <code>2</code></li></ul><p>属性的值除了可以是 <code>1</code> <code>2</code> 这样的数值外，也可以是一个集合（也即支持嵌套），例如将 <code>b</code> 的值改为集合 <code>{ c = 2; d = 3; }</code>：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> <span class="token punctuation">{</span>
    c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嵌套集合中的属性也可以利用 <code>.</code> 表示，例如上面这段的一种等价写法如下：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>上面的写法被称为“属性访问”，后面会再次介绍。</p></div><h3 id="递归属性集" tabindex="-1"><a class="header-anchor" href="#递归属性集"><span>递归属性集</span></a></h3><p>普通的属性集不支持递归引用，举个例子：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> 
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对上面的表达式求值，会报错：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>error: undefined variable &#39;a&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可见，当属性集内的属性 <code>b</code> 需要访问该集合的另一个属性 <code>a</code> 时，即使 <code>a</code> 是“先”定义的，也无法访问到。此时就需要我们改用递归（recursive）属性集，它相比普通的属性集，在前面多加了 <code>rec </code>：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>rec <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> a * <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对上面的表达式求值，结果如下：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，结果中的 <code>a = 1</code> 在前面，<code>b = 3</code> 在后面。这种顺序实际上与任何其它因素（包括声明顺序、求值依赖关系）都无关，而只与<strong>属性名称本身的排序</strong>有关。例如，对 <code>rec { a = 1; b = 2; }</code> 与 <code>rec { b = 2; a = 1; }</code> 的求值，都会把 <code>a = 1</code> 放在前面，归因到底，这只是因为 <code>a</code> 在字母表中位于 <code>b</code> 之前罢了。（直接原因则与 Nix 解释器对名称排序所用到的算法或者调用的库有关，这里不再深入。）</p><p>既然如此，将上面属性集里的两个元素位置对调：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>rec <span class="token punctuation">{</span>
  b <span class="token operator">=</span> a * <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会发现，Nix 解释器能自动处理求值顺序，并不会因为 <code>a</code> 的声明被调整到后面而影响求值结果（与之前的完全一致，从略）。这看起来相当“智能”，你甚至可以写得更复杂一些，比如 Nix 解释器也能自动处理下面的例子（结果略）：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>rec <span class="token punctuation">{</span>
  c <span class="token operator">=</span> a * <span class="token number">2</span> <span class="token operator">-</span> b <span class="token operator">+</span> d <span class="token operator">-</span> <span class="token number">35</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> d * <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">64</span><span class="token punctuation">;</span>
  d <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，这并不代表你可以直接用它来解方程。例如我们再写一个在数学上有唯一解的方程组：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>rec <span class="token punctuation">{</span>
  b <span class="token operator">=</span> a * <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此表达式求值的输出如下：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span>
  a <span class="token operator">=</span> «error<span class="token punctuation">:</span> infinite recursion encountered»<span class="token punctuation">;</span>
  b <span class="token operator">=</span> «error<span class="token punctuation">:</span> infinite recursion encountered»<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此可见，递归属性集内部处理求值顺序的机制，确实是递归的，而如果递归陷入死循环就会报错。</p><h3 id="列表" tabindex="-1"><a class="header-anchor" href="#列表"><span>列表</span></a></h3><p>之前我们学习了属性集，它含有多个元素，例如：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>fruits <span class="token operator">=</span> <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">;</span>
  c <span class="token operator">=</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的名称 <code>a</code> <code>b</code> <code>c</code> 或许可以有明确的含义，但有时我们不需要这些名称，而只关心后面的值，这种情况下就可以使用列表，例如：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>fruits <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;apple&quot;</span> <span class="token string">&quot;orange&quot;</span> <span class="token string">&quot;banana&quot;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意语法细节：</p><ul><li>列表以 <code>[</code> <code>]</code> 为边界，其内部为多个元素，每个元素都是值（value）而不是赋值语句。</li><li>元素之间使用空格（或换行）分隔，各元素<strong>不</strong>以 <code>;</code> 结尾。</li></ul><h2 id="let-绑定与属性访问" tabindex="-1"><a class="header-anchor" href="#let-绑定与属性访问"><span>let 绑定与属性访问</span></a></h2><p>前面关于变量的赋值与使用是非常基本的，我们还需要更灵活的处理方法。本节将会介绍用于定义局部变量的 <strong>let 绑定</strong>，以及风格简洁的<strong>属性访问</strong>。</p><h3 id="let-绑定" tabindex="-1"><a class="header-anchor" href="#let-绑定"><span><code>let</code> 绑定</span></a></h3><p>有时我们希望定义一个变量，使其不影响全局，仅在局部生效。此时就可以使用 <code>let</code> 绑定，示例如下：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  a <span class="token operator">+</span> b  <span class="token comment"># 结果是 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意语法细节：</p><ul><li><code>let</code> 与 <code>in</code> 之间的赋值语句以 <code>;</code> 结尾；</li><li><code>in</code> 之后<strong>只有一个表达式</strong>。注意，这只是语法形式上的要求，并不代表 <code>let</code> 绑定的用处很有限，因为表达式本身可以很复杂，常见的是嵌套属性集。作为基本示例，下面演示刚刚学到的列表：</li></ul><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token punctuation">[</span> a b c <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>求值的结果如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[ 1 2 3 ]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">作用域</p><p><code>let</code> 绑定是有作用域的，绑定的名称只能在作用域使用，或者说每个 <code>let</code> 绑定的名称只能在该表达式内使用。例如下面的例子：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">in</span> x<span class="token punctuation">;</span>
  b <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>b = x;</code> 不在作用域之内，会有报错如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>error: undefined variable &#39;x&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="属性访问" tabindex="-1"><a class="header-anchor" href="#属性访问"><span>属性访问</span></a></h3><p>使用 <code>.</code> 访问属性：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  attrset <span class="token operator">=</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  attrset<span class="token punctuation">.</span>x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问嵌套的属性也是同样的方式：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  attrset <span class="token operator">=</span> <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  attrset<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，就像如何访问属性一样，也可以用 <code>.</code> 直接赋值它：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="语法糖-with-和-inherit" tabindex="-1"><a class="header-anchor" href="#语法糖-with-和-inherit"><span>语法糖 <code>with</code> 和 <code>inherit</code></span></a></h2><p>语法糖（syntactic sugar）是对语言功能没有影响，但更方便使用的一种语法。本节将介绍两种常用的语法糖 <code>with</code> 和 <code>inherit</code>。</p><h3 id="with-表达式" tabindex="-1"><a class="header-anchor" href="#with-表达式"><span><code>with</code> 表达式</span></a></h3><p><code>with</code> 表达式可以让你少写几次属性集的名称，是个语法糖：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token keyword">with</span> a<span class="token punctuation">;</span> <span class="token punctuation">[</span> x y z <span class="token punctuation">]</span>  <span class="token comment"># 等价 [ a.x a.y a.z ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作用域被限制到了分号后面的第一个表达式内：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token punctuation">{</span>
    b <span class="token operator">=</span> <span class="token keyword">with</span> a<span class="token punctuation">;</span> <span class="token punctuation">[</span> x y z <span class="token punctuation">]</span><span class="token punctuation">;</span>
    c <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment"># a.x</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>x</code> 未定义：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>error: undefined variable <span class="token string">&#39;x&#39;</span>

       at «string»:10:7:

            <span class="token number">9</span><span class="token operator">|</span>   b <span class="token operator">=</span> with a<span class="token punctuation">;</span> <span class="token punctuation">[</span> x y z <span class="token punctuation">]</span><span class="token punctuation">;</span>
           <span class="token number">10</span><span class="token operator">|</span>   c <span class="token operator">=</span> x<span class="token punctuation">;</span>
             <span class="token operator">|</span>       ^
           <span class="token number">11</span><span class="token operator">|</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inherit-表达式" tabindex="-1"><a class="header-anchor" href="#inherit-表达式"><span><code>inherit</code> 表达式</span></a></h3><p><code>inherit</code> 本意就是继承，我们可以使用它完成一对命名相同的名称和属性之间的赋值：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">inherit</span> x y<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有这个语法糖，我们可能得这样写：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token punctuation">{</span>
    x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    y <span class="token operator">=</span> y<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加上括号，就直接从属性集继承名称：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">inherit</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> x y<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>inherit</code> 同样可以在 <code>let</code> 表达式中使用：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  <span class="token keyword">inherit</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> x y<span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token punctuation">[</span> x y <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  x <span class="token operator">=</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  y <span class="token operator">=</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token punctuation">[</span> x y <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们变相的将特定属性带到了全局作用域，实现了更方便的解构出名称的方法。</p><h2 id="字符串插值" tabindex="-1"><a class="header-anchor" href="#字符串插值"><span>字符串插值</span></a></h2><p>各大流行语言均已支持，使用 <code>&quot;\${ ... }&quot;</code> 可以插入名称的值：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  name <span class="token operator">=</span> <span class="token string">&quot;Nix&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token string">&quot;hello <span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&quot;hello Nix&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>字符串插值语法只支持字符串类型</strong>，所以引入的名称的值必须是字符串，或是可以转换为字符串的类型：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token string">&quot;<span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span> + <span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span> = <span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>x <span class="token operator">+</span> x<span class="token punctuation">}</span></span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为是数字类型，所以报错：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>error: cannot coerce an integer to a string

       at «string»:4:2:

            <span class="token number">3</span><span class="token operator">|</span> <span class="token keyword">in</span>
            <span class="token number">4</span><span class="token operator">|</span> <span class="token string">&quot;<span class="token variable">\${x}</span> + <span class="token variable">\${x}</span> = <span class="token variable">\${x + x}</span>&quot;</span>
             <span class="token operator">|</span>  ^
            <span class="token number">5</span><span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串插值是可以被嵌套的：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token string">&quot;no&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token string">&quot;\${a + &quot;</span> <span class="token antiquotation important">$</span><span class="token punctuation">{</span>a <span class="token operator">+</span> <span class="token string">&quot; <span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">}</span><span class="token string">&quot;}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&quot;no no no&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="路径类型" tabindex="-1"><a class="header-anchor" href="#路径类型"><span>路径类型</span></a></h2><p>路径在 Nix 语言中不是字符串类型，而是一种独立的类型，以下是一些路径的示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./relative  <span class="token comment"># 当前文件夹下 relative 文件（夹）的相对路径</span>
/current/directory/absolute  <span class="token comment"># 绝对路径，从根目录开始指定</span>
<span class="token punctuation">..</span>/  <span class="token comment"># 当前目录的上级目录</span>
<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/  <span class="token comment"># 当前目录的上级的上级目录</span>
./  <span class="token comment"># 当前目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="检索路径" tabindex="-1"><a class="header-anchor" href="#检索路径"><span>检索路径</span></a></h2><p>又名＂尖括号语法＂。</p><p>检索路径是通过系统变量来获取路径的语法，由一对尖括号组成：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token operator">&lt;</span>nixpkgs<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,146)),a("p",null,[n[1]||(n[1]=s("这个时候 ",-1)),n[2]||(n[2]=a("code",null,"<nixpkgs>",-1)),n[3]||(n[3]=s(" 实际上一依赖了系统变量中一个名为",-1)),a("a",r,[n[0]||(n[0]=a("code",null,"$NIX_PATH",-1)),i(e)]),n[4]||(n[4]=s(" 的路径值：",-1))]),n[22]||(n[22]=t(`<div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>/n<span class="token url">ix/var/nix/profiles/per-user/root/channels/nixpkgs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们建议你<strong>避免</strong>使用检索路径来指定其它相对路径，比如下面的例子：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token operator">&lt;</span><span class="token url">nixpkgs/lib</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>这是一种污染</strong>，因为这样指定相对路径会让配置与环境产生联系。我们的配置文件应该尽量保留纯函数式的特性，即输出只与输入有关，纯函数不应该与外界产生任何联系。</p><h2 id="多行字符串" tabindex="-1"><a class="header-anchor" href="#多行字符串"><span>多行字符串</span></a></h2><p>Nix 中被两对单引号 <code>&#39;&#39;</code> 引用的内容即为多行字符串。</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&#39;&#39;
multi
line
string
&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&quot;multi\\nline\\nstring&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Nix 的多行字符串存在特殊行为，其一是，Nix 会智能地去除掉开头的缩进，这在其他语言中是不常见的。</p><p>举个例子：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&#39;&#39;
  one
   two
    three
&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&quot;one\\n two\\n  three\\n&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="multi-line-string-escape" tabindex="-1"><a class="header-anchor" href="#multi-line-string-escape"><span>字符串中的字符转义</span></a></h2><p>在单行字符串中，Nix 的转义语法与许多其他语言相同，<code>&quot;</code> <code>\\</code> <code>\${</code> 以及其他 <code>\\n</code><code>\\t</code> 等特殊字符，都可直接使用 <code>\\</code> 进行转义，比如：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&quot;this is a \\&quot;string\\&quot; \\\\&quot;</span>  <span class="token comment"># 结果是: this is a &quot;string&quot; \\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但在多行字符串中，情况会有点特殊。Nix 规定在多行字符串中需要使用两个单引号 <code>&#39;&#39;</code> 来转义。</p><p>比如如下 Nix 代码会输出原始字符 <code>\${a}</code>，而不是做字符串插值：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
<span class="token string">&#39;&#39;the value of a is:
  &#39;&#39;\${a}
&#39;&#39;</span>  <span class="token comment"># 结果是 &quot;the value of a is \${a}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他 <code>\\n</code> <code>\\t</code> 等特殊字符的转义也类似，必须使用两个单引号来转义，如</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&#39;&#39;
  this is a
  multi-line
  string
  &#39;&#39;\\n
&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但如果我们希望在字符串中使用原始字符 <code>&#39;&#39;</code>，因为会与多行字符串原有的语义冲突，不能直接写 <code>&#39;&#39;</code>，而必须改用 <code>&#39;&#39;&#39;</code> 三个单引号。也就是说，在多行字符串中的 <code>&#39;&#39;&#39;</code> 三个单引号这样的组合，实际输出的是原始字符串 <code>&#39;&#39;</code>.</p><p>举个例子：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  a <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
<span class="token string">&#39;&#39;the value of a is:
  &#39;&#39;&#39;\${a}&#39;&#39;&#39;
&#39;&#39;</span>  <span class="token comment"># 结果是 &quot;the value of a is &#39;&#39;1&#39;&#39;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><p>函数在 Nix 语言中是人上人，我们先来声明一个匿名函数（Lambda）：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>冒号左边是函数参数，冒号右边跟随一个空格，随即是函数体。</p><p>这是个嵌套的函数，支持多重参数（柯里化函数）：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>x<span class="token punctuation">:</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数当然可以是属性集类型：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为函数指定默认参数，在缺省该参数赋值的情况下，它就是默认值：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>允许传入额外的属性：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b  <span class="token comment"># 明确传入的属性有 a 和 b，传入额外的属性将被忽略</span>
<span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c  <span class="token comment"># 即使传入的属性有 c，一样不会参与计算，这里会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为额外的参数绑定到参数集，然后调用：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>args<span class="token operator">@</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> args<span class="token punctuation">.</span>c
<span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token operator">@</span>args<span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> args<span class="token punctuation">.</span>c  <span class="token comment"># 也可以是这样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为函数命名：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  f <span class="token operator">=</span> x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">in</span>
  f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用函数，并使用函数构建新属性集：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>concat <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b  <span class="token comment"># 等价于 concat = x: x.a + x.b</span>
concat <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello &quot;</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token string">&quot;NixOS&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>Hello NixOS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于函数与参数使用空格分隔，所以我们可以使用括号将函数体与参数分开：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">(</span>x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span>  <span class="token comment"># 向该 Lambda 函数传入参数 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="柯里化函数" tabindex="-1"><a class="header-anchor" href="#柯里化函数"><span>柯里化函数</span></a></h2><p>我们将 <code>f (a,b,c)</code> 转换为 <code>f (a)(b)(c)</code> 的过程就是柯里化。为什么需要柯里化？因为它很灵活，可以避免重复传入参数，当你传入第一个参数的时候，该函数就已经具有了第一个参数的状态（闭包）。</p><p>尝试声明一个柯里化函数：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>x<span class="token punctuation">:</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了更好的可读性，我们推荐你这样写：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>x<span class="token punctuation">:</span> <span class="token punctuation">(</span>y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个例子中的柯里化函数，虽然接收两个参数，但不是＂迫切＂需要：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  f <span class="token operator">=</span> x<span class="token punctuation">:</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token keyword">in</span>
  f <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token operator">&lt;</span>LAMBDA<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>f 1</code> 的值依然是函数，这个函数大概是：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>y<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">+</span> y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以保存这个状态的函数，稍后再来使用：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  f <span class="token operator">=</span> x<span class="token punctuation">:</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token keyword">in</span>
  <span class="token keyword">let</span> g <span class="token operator">=</span> f <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">in</span> g <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以一次性赋值：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  f <span class="token operator">=</span> x<span class="token punctuation">:</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token keyword">in</span>
  f <span class="token number">1</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="属性集参数" tabindex="-1"><a class="header-anchor" href="#属性集参数"><span>属性集参数</span></a></h2><p>当我们被要求必须传入多个参数时，使用这种函数声明方法：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用该函数：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  f <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">in</span>
  f <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们额外传入参数，会怎么样？</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  f <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">in</span>
  f <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意外参数 <code>c</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>error: <span class="token string">&#39;f&#39;</span> at <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:2:7 called with unexpected argument <span class="token string">&#39;c&#39;</span>

       at «string»:4:1:

            <span class="token number">3</span><span class="token operator">|</span> <span class="token keyword">in</span>
            <span class="token number">4</span><span class="token operator">|</span> f <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
             <span class="token operator">|</span> ^
            <span class="token number">5</span><span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="默认参数" tabindex="-1"><a class="header-anchor" href="#默认参数"><span>默认参数</span></a></h2><p>前面稍微提到过一点，没有什么需要过多讲解的地方：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  f <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b <span class="token operator">?</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">in</span>
  f <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值是可选的，根据你的需要来：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  f <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b <span class="token operator">?</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">in</span>
  f <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="额外参数" tabindex="-1"><a class="header-anchor" href="#额外参数"><span>额外参数</span></a></h2><p>有的时候，我们设计的函数不得不接收一些我们不需要的额外参数，我们可以使用 <code>...</code> 允许接收额外参数：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不比上个例子，这次不会报错：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  f <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">in</span>
  f <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命名参数集" tabindex="-1"><a class="header-anchor" href="#命名参数集"><span>命名参数集</span></a></h2><p>又名 ＂<code>@</code> 模式＂。在上文中，我们已经可以接收到额外的参数了，假如我们需要使用某个额外参数，我们可以使用命名属性集将其接收到一个另外的集合：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token operator">@</span>args<span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> args<span class="token punctuation">.</span>c  <span class="token comment"># 这样声明函数</span>
args<span class="token operator">@</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> args<span class="token punctuation">.</span>c  <span class="token comment"># 或是这样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>具体示例如下：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span>
  f <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token operator">@</span>args<span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> args<span class="token punctuation">.</span>c<span class="token punctuation">;</span>
<span class="token keyword">in</span>
  f <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数库" tabindex="-1"><a class="header-anchor" href="#函数库"><span>函数库</span></a></h2>`,88)),a("p",null,[n[6]||(n[6]=s("除了一些",-1)),a("a",u,[n[5]||(n[5]=s("内建操作符",-1)),i(e)]),n[7]||(n[7]=s(" （",-1)),n[8]||(n[8]=a("code",null,"+",-1)),n[9]||(n[9]=s(", ",-1)),n[10]||(n[10]=a("code",null,"==",-1)),n[11]||(n[11]=s(", ",-1)),n[12]||(n[12]=a("code",null,"&&",-1)),n[13]||(n[13]=s(", 等）,我们还要学习一些被视为事实标准的库。",-1))]),n[23]||(n[23]=a("h3",{id:"内建函数",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#内建函数"},[a("span",null,"内建函数")])],-1)),a("p",null,[n[15]||(n[15]=s("它们在 Nix 语言中并不是 ",-1)),n[16]||(n[16]=a("code",null,"<LAMBDA>",-1)),n[17]||(n[17]=s(" 类型，而是 ",-1)),n[18]||(n[18]=a("code",null,"<PRIMOP>",-1)),n[19]||(n[19]=s(" 元操作类型（primitive operations）。这些函数是内置在 Nix 解释器中，由 C++ 实现。查询",-1)),a("a",v,[n[14]||(n[14]=s("内建函数",-1)),i(e)]),n[20]||(n[20]=s(" 以了解其使用方法。",-1))]),n[24]||(n[24]=t(`<div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">builtins</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 通过 builtins 使用函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="导入" tabindex="-1"><a class="header-anchor" href="#导入"><span>导入</span></a></h3><p><code>import</code> 表达式以其他 Nix 文件的路径为参数，返回该 Nix 文件的求值结果。</p><p><code>import</code> 的参数如果为文件夹路径，那么会返回该文件夹下的 <code>default.nix</code> 文件的执行结果。</p><p>如下示例中，<code>import</code> 会导入 <code>./file.nix</code> 文件，并返回该文件的求值结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token number">1</span> + <span class="token number">2</span> <span class="token operator">&gt;</span> file.nix
<span class="token function">import</span> ./file.nix
<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被导入的 Nix 文件可以返回任何内容，返回值可以向上面的例子一样是数值，也可以是属性集（attribute set）、函数、列表，等等。</p><p>如下示例导入了 <code>file.nix</code> 文件中定义的一个函数，并使用参数调用了该函数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;x: x + 1&quot;</span> <span class="token operator">&gt;</span> file.nix
<span class="token function">import</span> ./file.nix <span class="token number">1</span>
<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9))])}const g=p(d,[["render",k],["__file","QuickOverview.html.vue"]]),h=JSON.parse('{"path":"/tutorials/lang/QuickOverview.html","title":"Nix 语言快速入门","lang":"zh-CN","frontmatter":{"description":"Nix 语言快速入门 基础要求 以下教程需要你具有一定基础。具体来说，如果你已经知道在编程领域什么是变量（variable）、赋值（assign）、字符串（string）、函数（function）及参数（argument），那么你的知识水平就差不多足够了。 仅面向本文维护者的说明，单击以切换折叠/展开 本文在设计上是线性的，也即只需要读者具备一点点基础...","head":[["meta",{"property":"og:url","content":"https://nixos-cn.github.io/tutorials/lang/QuickOverview.html"}],["meta",{"property":"og:site_name","content":"NixOS 中文"}],["meta",{"property":"og:title","content":"Nix 语言快速入门"}],["meta",{"property":"og:description","content":"Nix 语言快速入门 基础要求 以下教程需要你具有一定基础。具体来说，如果你已经知道在编程领域什么是变量（variable）、赋值（assign）、字符串（string）、函数（function）及参数（argument），那么你的知识水平就差不多足够了。 仅面向本文维护者的说明，单击以切换折叠/展开 本文在设计上是线性的，也即只需要读者具备一点点基础..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-25T23:52:06.000Z"}],["meta",{"property":"article:author","content":"NixOS-CN"}],["meta",{"property":"article:modified_time","content":"2025-09-25T23:52:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nix 语言快速入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-25T23:52:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"NixOS-CN\\",\\"url\\":\\"https://github.com/nixos-cn\\"}]}"]]},"headers":[{"level":2,"title":"实践环境","slug":"实践环境","link":"#实践环境","children":[{"level":3,"title":"交互模式","slug":"交互模式","link":"#交互模式","children":[]},{"level":3,"title":"文件求值","slug":"文件求值","link":"#文件求值","children":[]}]},{"level":2,"title":"注释、缩进与换行","slug":"注释、缩进与换行","link":"#注释、缩进与换行","children":[]},{"level":2,"title":"赋值与集合","slug":"赋值与集合","link":"#赋值与集合","children":[{"level":3,"title":"名称和值","slug":"名称和值","link":"#名称和值","children":[]},{"level":3,"title":"属性集","slug":"属性集","link":"#属性集","children":[]},{"level":3,"title":"递归属性集","slug":"递归属性集","link":"#递归属性集","children":[]},{"level":3,"title":"列表","slug":"列表","link":"#列表","children":[]}]},{"level":2,"title":"let 绑定与属性访问","slug":"let-绑定与属性访问","link":"#let-绑定与属性访问","children":[{"level":3,"title":"let 绑定","slug":"let-绑定","link":"#let-绑定","children":[]},{"level":3,"title":"属性访问","slug":"属性访问","link":"#属性访问","children":[]}]},{"level":2,"title":"语法糖 with 和 inherit","slug":"语法糖-with-和-inherit","link":"#语法糖-with-和-inherit","children":[{"level":3,"title":"with 表达式","slug":"with-表达式","link":"#with-表达式","children":[]},{"level":3,"title":"inherit 表达式","slug":"inherit-表达式","link":"#inherit-表达式","children":[]}]},{"level":2,"title":"字符串插值","slug":"字符串插值","link":"#字符串插值","children":[]},{"level":2,"title":"路径类型","slug":"路径类型","link":"#路径类型","children":[]},{"level":2,"title":"检索路径","slug":"检索路径","link":"#检索路径","children":[]},{"level":2,"title":"多行字符串","slug":"多行字符串","link":"#多行字符串","children":[]},{"level":2,"title":"字符串中的字符转义","slug":"multi-line-string-escape","link":"#multi-line-string-escape","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"柯里化函数","slug":"柯里化函数","link":"#柯里化函数","children":[]},{"level":2,"title":"属性集参数","slug":"属性集参数","link":"#属性集参数","children":[]},{"level":2,"title":"默认参数","slug":"默认参数","link":"#默认参数","children":[]},{"level":2,"title":"额外参数","slug":"额外参数","link":"#额外参数","children":[]},{"level":2,"title":"命名参数集","slug":"命名参数集","link":"#命名参数集","children":[]},{"level":2,"title":"函数库","slug":"函数库","link":"#函数库","children":[{"level":3,"title":"内建函数","slug":"内建函数","link":"#内建函数","children":[]},{"level":3,"title":"导入","slug":"导入","link":"#导入","children":[]}]}],"git":{"createdTime":1711465427000,"updatedTime":1758844326000,"contributors":[{"name":"Celestial.y","email":"celestial.y@outlook.com","commits":4},{"name":"Ryan Yin","email":"xiaoyin_c@qq.com","commits":3},{"name":"AmourAmer","email":"153876579+AmourAmer@users.noreply.github.com","commits":2},{"name":"Tatooi Noyo","email":"tatooi.noyo@outlook.com","commits":2},{"name":"Aki Tomoyo","email":"124855923+aki-tomoyo@users.noreply.github.com","commits":1},{"name":"wano","email":"55907021+wanlce@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":17.88,"words":5364},"filePathRelative":"tutorials/lang/QuickOverview.md","localizedDate":"2024年3月26日","autoDesc":true,"excerpt":"\\n<!-- prettier-ignore -->\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">基础要求</p>\\n<p>以下教程需要你具有一定基础。具体来说，如果你已经知道在编程领域什么是变量（variable）、赋值（assign）、字符串（string）、函数（function）及参数（argument），那么你的知识水平就差不多足够了。</p>\\n<!-- prettier-ignore -->\\n</div>\\n<details><summary>仅面向本文维护者的说明，单击以切换折叠/展开</summary>\\n本文在设计上是线性的，也即只需要读者具备一点点基础，就可以通过按顺序从头读到尾的方式完成本文的学习。因此，请留心说明顺序，例如讲 let 绑定时如果举了一个列表的例子，你需要确保前面已经正式介绍过列表。再如，讲 with 语法糖的时候同时用到 let 绑定和列表，那么这两个概念都需要在前面已经正式介绍过。否则，读者很可能会面对初次接触的语法或者概念而被卡住，这会严重影响学习效率甚至是完成率。若出于顺序安排的其他合理性原因，实在无法避开在说明中涉及陌生概念，可以提示读者相关部分不需要理解，后面会讲到。\\n</details>"}');export{g as comp,h as data};
