import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as p,a,b as n,d as o,e as s}from"./app-DtxYiiVU.js";const c={},d=s(`<h1 id="nix-语言进阶手册" tabindex="-1"><a class="header-anchor" href="#nix-语言进阶手册"><span>Nix 语言进阶手册</span></a></h1><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="原始数据类型" tabindex="-1"><a class="header-anchor" href="#原始数据类型"><span>原始数据类型</span></a></h3><h4 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h4><p>有三种方式定义字符串。</p><h5 id="单行字符串" tabindex="-1"><a class="header-anchor" href="#单行字符串"><span>单行字符串</span></a></h5><p>与大多数编程语言的字符串一致，使用双引号闭合：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&quot;Hello, nix!\\n&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="多行字符串" tabindex="-1"><a class="header-anchor" href="#多行字符串"><span>多行字符串</span></a></h5><p>多行字符串是通过<mark>两个单引号</mark>闭合的。</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&#39;&#39;
This is the first line.
This is the second line.
This is the third line.
&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多行字符串往往会带有不同程度的缩进，会被进一步处理。也就是说对于以下字符串：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&#39;&#39;
  This is the first line.
  This is the second line.
    This is the third line.
&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会被“智能缩进”处理，处理后的结果是：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&#39;&#39;
This is the first line.
This is the second line.
  This is the third line.
&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一行都被前移了最小缩进数个字符。</p><p>同时，假如第一行被占空了，也会对其进行处理：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&#39;&#39;

There&#39;s a row of spaces up there.
&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理后的数据是：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&#39;&#39;
There&#39;s a row of spaces up there.
&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nix 只会将自动处理后的字符串当作输入，而不是原始字符串（raw string）。</p><h5 id="uri" tabindex="-1"><a class="header-anchor" href="#uri"><span>URI</span></a></h5>`,22),r={href:"https://www.ietf.org/rfc/rfc2396.txt",target:"_blank",rel:"noopener noreferrer"},u=s(`<div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>UriWithoutQuotes <span class="token operator">=</span> <span class="token url">http://example.org/foo.tar.bz2</span>
UriWithQuotes <span class="token operator">=</span> <span class="token string">&quot;http://example.org/foo.tar.bz2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>两者是等价的。</p><h4 id="数字" tabindex="-1"><a class="header-anchor" href="#数字"><span>数字</span></a></h4><p>数字被分为浮点型（比如 <code>.114514</code>）与整型（比如 <code>2233</code>）。</p><p>数字是类型兼容的：纯整数运算总是返回整数，而任何涉及至少一个浮点数的运算都会返回一个浮点数。</p><h4 id="路径" tabindex="-1"><a class="header-anchor" href="#路径"><span>路径</span></a></h4><p>路径至少需要包含一个斜杠才能被识别为路径：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>/f<span class="token url">oo/bar/bla.nix</span>
<span class="token url">~/foo/bar.nix</span>
<span class="token url">../foo/bar/qux.nix</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了某些尖括号路径（比如 <code>&lt;nixpkgs&gt;</code>）外，其他路径都支持字符串插值。</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token string">&quot;<span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span><span class="token url">./foo.txt</span><span class="token punctuation">}</span></span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="布尔" tabindex="-1"><a class="header-anchor" href="#布尔"><span>布尔</span></a></h4><p><code>true</code> 或 <code>false</code>。</p><h4 id="空" tabindex="-1"><a class="header-anchor" href="#空"><span>空</span></a></h4><p>字面意思上的 <code>null</code>。</p><h3 id="列表" tabindex="-1"><a class="header-anchor" href="#列表"><span>列表</span></a></h3><p>列表使用中括号闭合，空格分隔元素，一个列表允许包含不同类型的值：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">[</span> <span class="token number">123</span> <span class="token url">./foo.nix</span> <span class="token string">&quot;abc&quot;</span> <span class="token punctuation">(</span>f <span class="token punctuation">{</span> x <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处如果不给 <code>f { x = y; }</code> 打上括号，就会把函数也当作此列表的值。</p><h3 id="属性集" tabindex="-1"><a class="header-anchor" href="#属性集"><span>属性集</span></a></h3><p>属性集是用大括号括起来的名称与值对（称为属性）的集合。</p><p>属性名可以是标识符或字符串。标识符必须以字母或下划线开头，可以包含字母、数字、下划线、撇号（<code>&#39;</code>）或连接符（<code>-</code>）。</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
  text <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> f <span class="token punctuation">{</span> bla <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <code>.</code> 访问各个属性：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token string">&quot;Foo&quot;</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token string">&quot;Bar&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>or</code> 关键字，可以在属性选择中提供默认值：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token string">&quot;Foo&quot;</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token string">&quot;Bar&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>c <span class="token keyword">or</span> <span class="token string">&quot;Xyzzy&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为属性 <code>c</code> 不在属性集里，故输出默认值。</p><p>也可以用字符串去访问属性：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> <span class="token string">&quot;$!@#?&quot;</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token string">&quot;$!@#?&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>属性名也支持字符串插值：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span> <span class="token keyword">in</span>
<span class="token punctuation">{</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token antiquotation important">$</span><span class="token punctuation">{</span>bar<span class="token punctuation">}</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span> <span class="token keyword">in</span>
<span class="token punctuation">{</span> <span class="token antiquotation important">$</span><span class="token punctuation">{</span>bar<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者的值都是 123。</p><p>在特殊情况下，如果集合声明中的属性名求值为 null（这是错误的，因为 null 不能被强制为字符串），那么该属性将不会被添加到集合中：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> <span class="token antiquotation important">$</span><span class="token punctuation">{</span><span class="token keyword">if</span> foo <span class="token keyword">then</span> <span class="token string">&quot;bar&quot;</span> <span class="token keyword">else</span> <span class="token keyword">null</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 foo 的值为 <code>false</code>，则其值为 <code>{}</code>。</p><p>如果一个集合的 <code>__functor</code> 属性的值是可调用的（即它本身是一个函数或是其中一个集合的 <code>__functor</code> 属性的值是可调用的），那么它就可以像函数一样被应用，首先传入的是集合本身，例如：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token keyword">let</span> <span class="token function">add</span> <span class="token operator">=</span> <span class="token punctuation">{</span> __functor <span class="token operator">=</span> self<span class="token punctuation">:</span> x<span class="token punctuation">:</span> x <span class="token operator">+</span> self<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    inc <span class="token operator">=</span> <span class="token function">add</span> <span class="token operator">//</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">in</span> inc <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>求值为 2。这可用于为函数附加元数据，而调用者无需对其进行特殊处理，也可用于实现面向对象编程等形式。</p><h2 id="数据构造" tabindex="-1"><a class="header-anchor" href="#数据构造"><span>数据构造</span></a></h2><h3 id="递归属性集" tabindex="-1"><a class="header-anchor" href="#递归属性集"><span>递归属性集</span></a></h3><h3 id="let-绑定" tabindex="-1"><a class="header-anchor" href="#let-绑定"><span><code>let</code> 绑定</span></a></h3><h3 id="继承至属性" tabindex="-1"><a class="header-anchor" href="#继承至属性"><span>继承至属性</span></a></h3><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3><h3 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断"><span>条件判断</span></a></h3><h3 id="断言" tabindex="-1"><a class="header-anchor" href="#断言"><span>断言</span></a></h3><h3 id="with-表达式" tabindex="-1"><a class="header-anchor" href="#with-表达式"><span><code>with</code> 表达式</span></a></h3><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h3>`,47);function h(v,k){const e=i("ExternalLinkIcon");return l(),p("div",null,[d,a("p",null,[n("为了书写简便， "),a("a",r,[n("RFC 2396"),o(e)]),n(" 规定了对于 URI 可以不使用引号闭合：")]),u])}const b=t(c,[["render",h],["__file","Manuals.html.vue"]]),g=JSON.parse('{"path":"/tutorials/lang/Manuals.html","title":"Nix 语言进阶手册","lang":"zh-CN","frontmatter":{"description":"Nix 语言进阶手册 数据类型 原始数据类型 字符串 有三种方式定义字符串。 单行字符串 与大多数编程语言的字符串一致，使用双引号闭合： 多行字符串 多行字符串是通过两个单引号闭合的。 多行字符串往往会带有不同程度的缩进，会被进一步处理。也就是说对于以下字符串： 会被“智能缩进”处理，处理后的结果是： 每一行都被前移了最小缩进数个字符。 同时，假如第一...","head":[["meta",{"property":"og:url","content":"https://nixos-cn.github.io/tutorials/lang/Manuals.html"}],["meta",{"property":"og:site_name","content":"NixOS 中文"}],["meta",{"property":"og:title","content":"Nix 语言进阶手册"}],["meta",{"property":"og:description","content":"Nix 语言进阶手册 数据类型 原始数据类型 字符串 有三种方式定义字符串。 单行字符串 与大多数编程语言的字符串一致，使用双引号闭合： 多行字符串 多行字符串是通过两个单引号闭合的。 多行字符串往往会带有不同程度的缩进，会被进一步处理。也就是说对于以下字符串： 会被“智能缩进”处理，处理后的结果是： 每一行都被前移了最小缩进数个字符。 同时，假如第一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T15:03:47.000Z"}],["meta",{"property":"article:author","content":"NixOS-CN"}],["meta",{"property":"article:modified_time","content":"2024-03-26T15:03:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nix 语言进阶手册\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-26T15:03:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"NixOS-CN\\",\\"url\\":\\"https://github.com/nixos-cn\\"}]}"]]},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"原始数据类型","slug":"原始数据类型","link":"#原始数据类型","children":[]},{"level":3,"title":"列表","slug":"列表","link":"#列表","children":[]},{"level":3,"title":"属性集","slug":"属性集","link":"#属性集","children":[]}]},{"level":2,"title":"数据构造","slug":"数据构造","link":"#数据构造","children":[{"level":3,"title":"递归属性集","slug":"递归属性集","link":"#递归属性集","children":[]},{"level":3,"title":"let 绑定","slug":"let-绑定","link":"#let-绑定","children":[]},{"level":3,"title":"继承至属性","slug":"继承至属性","link":"#继承至属性","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":3,"title":"条件判断","slug":"条件判断","link":"#条件判断","children":[]},{"level":3,"title":"断言","slug":"断言","link":"#断言","children":[]},{"level":3,"title":"with 表达式","slug":"with-表达式","link":"#with-表达式","children":[]},{"level":3,"title":"注释","slug":"注释","link":"#注释","children":[]}]}],"git":{"createdTime":1697259560000,"updatedTime":1711465427000,"contributors":[{"name":"OpenTritium","email":"tritium404@hotmail.com","commits":4},{"name":"Ryan Yin","email":"xiaoyin_c@qq.com","commits":1}]},"readingTime":{"minutes":3.08,"words":924},"filePathRelative":"tutorials/lang/Manuals.md","localizedDate":"2023年10月14日","autoDesc":true,"excerpt":"\\n<h2>数据类型</h2>\\n<h3>原始数据类型</h3>\\n<h4>字符串</h4>\\n<p>有三种方式定义字符串。</p>\\n<h5>单行字符串</h5>\\n<p>与大多数编程语言的字符串一致，使用双引号闭合：</p>\\n<div class=\\"language-nix\\" data-ext=\\"nix\\" data-title=\\"nix\\"><pre class=\\"language-nix\\"><code><span class=\\"token string\\">\\"Hello, nix!\\\\n\\"</span>\\n</code></pre></div><h5>多行字符串</h5>\\n<p>多行字符串是通过<mark>两个单引号</mark>闭合的。</p>"}');export{b as comp,g as data};
