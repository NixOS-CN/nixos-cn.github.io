import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c,a as n,b as s,d as e,e as l}from"./app-DtxYiiVU.js";const p={},u=n("h2",{id:"nixpkgs-中的-haskell-基础设施",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nixpkgs-中的-haskell-基础设施"},[n("span",null,"Nixpkgs 中的 Haskell 基础设施")])],-1),d={href:"https://github.com/NixOS/nixpkgs",target:"_blank",rel:"noopener noreferrer"},r=n("br",null,null,-1),k=l(`<h2 id="haskell-开发工具" tabindex="-1"><a class="header-anchor" href="#haskell-开发工具"><span>Haskell 开发工具</span></a></h2><h3 id="编译器" tabindex="-1"><a class="header-anchor" href="#编译器"><span>编译器</span></a></h3><p>在进入 Nix 相关的话题之前，有必要介绍一下现在 Haskell 的工具链以及常用的包管理器。首先 GHC 多年来已经成为 Haskell<br> 编译器的业界标准——其他编译器譬如 JHC、GHC-JS、UHC 等等通常只实现了很基础的 Haskell 语言（例如 Haskell<br> 2010）。它们的开发重点可能在提供不同的后端支持或者极致优化性能，总之并不是为了生产准备的。因此，对于发行版而言一般来说分发<br> Haskell 软件意味着使用 GHC 作为编译器。</p><h3 id="包管理" tabindex="-1"><a class="header-anchor" href="#包管理"><span>包管理</span></a></h3><p>除了编译器外，非平凡编程语言不可或缺的还有包管理器。与 GCC 等 C 语言编译器不同，GHC 内建了“包”的概念，或者说它本身就是一个包管理器。如果安装了<br> GHC，运行 <code>ghc-pkg list</code> 可以看到全局的包集：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ghc-pkg list
/nix/store/322zfsd89g1xph46glm0jjvwjkj09mv4-ghc-9.2.6/lib/ghc-9.2.6/package.conf.d
    Cabal-3.6.3.0
    array-0.5.4.0
    base-4.16.4.0
    binary-0.8.9.0
    <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 GHC 所谓的包仅仅是一个名字和版本号，并且 GHC 本身不提供任何“正常的”包管理器拥有的功能，例如版本解析、管理已编译的依赖等等。默认<br> FHS 环境下，全局包集位于 <code>/usr/lib/ghc-版本/package.conf.d</code>。这个路径可以使用环境变量覆盖，在 Nix<br> 中就使用了该方法。该目录包含了包集中每个包的一些元数据，例如包名、版本、编译结果等等。GHC<br> 可以对包集增删新的包，但不会去编译相应的，如果文件丢失或者依赖损坏只会报错。显然，这样的包管理能力并不是为直接面向开发者准备的。对于开发，有两个流行的包管理器——<br> Cabal 和 Stack。</p><h4 id="cabal" tabindex="-1"><a class="header-anchor" href="#cabal"><span>Cabal</span></a></h4><p>首先介绍 Cabal。在实践中很多用户混淆 <code>cabal-install</code>（命令行包管理工具）与 <code>Cabal</code>（GHC 的一个 Boot Library）。后者相当于<br> Haskell 的构建系统，它定义了什么是一个 Haskell 包（样例来源于 Cabal 文档）：</p><div class="language-cabal line-numbers-mode" data-ext="cabal" data-title="cabal"><pre class="language-cabal"><code>name:            TestPackage
version:         0.0
synopsis:        Package with library and two programs
license:         BSD3
author:          Angela Author
build-type:      Simple
cabal-version:   &gt;= 1.8

library
  build-depends:   HUnit &gt;= 1.1.1 &amp;&amp; &lt; 1.2
  exposed-modules: A, B, C

executable program1
  main-is:         Main.hs
  hs-source-dirs:  prog1
  other-modules:   A, B

executable program2
  main-is:         Main.hs
  hs-source-dirs:  prog2
  other-modules:   A, C, Utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中包有版本、名字、不同的组件（库或者可执行文件）、以及它们的依赖和编译器参数等等。所有构建相关的实现都实现在 <code>Cabal</code> 库中。在很多<br> Haskell 项目中，存在一个 <code>Setup.hs</code> 文件：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token import-statement"><span class="token keyword">import</span> Distribution<span class="token punctuation">.</span>Simple</span>
<span class="token hvariable">main</span> <span class="token operator">=</span> <span class="token hvariable">defaultMain</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,12),v=n("code",null,"runhaskell Setup.hs configure",-1),h=n("code",null,"runhaskell Setup.hs build",-1),b=n("code",null,"Cabal",-1),g=n("br",null,null,-1),m=n("code",null,"cabal build",-1),_=n("br",null,null,-1),x=n("code",null,"Cabal",-1),f=n("br",null,null,-1),H=n("code",null,"cabal-install",-1),y=n("br",null,null,-1),C=n("code",null,"cabal",-1),N=n("code",null,"Cabal",-1),S=n("code",null,"Cabal",-1),w=n("br",null,null,-1),P=n("code",null,"cabal",-1),q=n("code",null,"~/.cabal/store",-1),G=n("br",null,null,-1),F={href:"https://hackage.haskell.org/",target:"_blank",rel:"noopener noreferrer"},O=n("br",null,null,-1),D=n("code",null,"cabal",-1),B=n("code",null,"cabal",-1),T=n("br",null,null,-1),z=n("code",null,"Cabal",-1),A=n("br",null,null,-1),I=n("code",null,"cabal",-1),E=n("br",null,null,-1),j=n("code",null,"cabal",-1),L=n("br",null,null,-1),M=n("br",null,null,-1),U=n("code",null,"http-client >=0.3.2 && <0.4",-1),J=n("code",null,"pandoc",-1),V=n("code",null,"http-client >= 0.4.1 && <0.4.2",-1),$=n("br",null,null,-1),W=n("code",null,"pandoc",-1),Z=n("code",null,"cabal install",-1),R=n("br",null,null,-1),Y=n("h4",{id:"stack",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#stack"},[n("span",null,"Stack")])],-1),K=n("code",null,"cabal",-1),Q=n("br",null,null,-1),X=n("br",null,null,-1),nn={href:"https://www.stackage.org/",target:"_blank",rel:"noopener noreferrer"},sn=n("br",null,null,-1),an={href:"https://www.stackage.org/lts-20.13",target:"_blank",rel:"noopener noreferrer"},en=n("br",null,null,-1),ln=n("br",null,null,-1),tn=n("code",null,"cabal",-1),on={href:"https://github.com/sol/hpack",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"package.yaml",-1),pn=n("br",null,null,-1),un=n("code",null,"<项目名>.cabal",-1),dn=l(`<div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> TestPackage
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">0.0</span>
<span class="token key atrule">synopsis</span><span class="token punctuation">:</span> Package with library and two programs
<span class="token key atrule">maintainer</span><span class="token punctuation">:</span> Angela Author

<span class="token key atrule">dependencies</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> base <span class="token punctuation">&gt;</span>= 4.9 <span class="token important">&amp;&amp;</span> &lt; 5

<span class="token key atrule">library</span><span class="token punctuation">:</span>
  <span class="token key atrule">source-dirs</span><span class="token punctuation">:</span> src

<span class="token key atrule">executable</span><span class="token punctuation">:</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span> Main.hs
  <span class="token key atrule">source-dirs</span><span class="token punctuation">:</span> prog1
  <span class="token key atrule">dependencies</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> HUnit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),rn=n("code",null,"stack",-1),kn=n("code",null,"Cabal",-1),vn=n("br",null,null,-1),hn=n("br",null,null,-1),bn=n("code",null,"extra-deps",-1),gn=n("br",null,null,-1),mn={href:"https://github.com/IHaskell/IHaskell/blob/8afa4e22c5724da89fec85a599ee129ab5b4cb9a/stack-8.10.yaml",target:"_blank",rel:"noopener noreferrer"},_n=l(`<div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">extra-deps</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> active<span class="token punctuation">-</span>0.2.0.14
  <span class="token punctuation">-</span> Chart<span class="token punctuation">-</span>cairo<span class="token punctuation">-</span>1.9.3
  <span class="token punctuation">-</span> diagrams<span class="token punctuation">-</span><span class="token number">1.4</span>
  <span class="token punctuation">-</span> diagrams<span class="token punctuation">-</span>cairo<span class="token punctuation">-</span>1.4.1.1
  <span class="token punctuation">-</span> diagrams<span class="token punctuation">-</span>contrib<span class="token punctuation">-</span>1.4.4
  <span class="token punctuation">-</span> diagrams<span class="token punctuation">-</span>core<span class="token punctuation">-</span>1.5.0
  <span class="token punctuation">-</span> diagrams<span class="token punctuation">-</span>lib<span class="token punctuation">-</span>1.4.4
  <span class="token punctuation">-</span> diagrams<span class="token punctuation">-</span>svg<span class="token punctuation">-</span>1.4.3
  <span class="token punctuation">-</span> cairo<span class="token punctuation">-</span>0.13.8.1
  <span class="token punctuation">-</span> pango<span class="token punctuation">-</span>0.13.8.1
  <span class="token punctuation">-</span> glib<span class="token punctuation">-</span>0.13.8.1
  <span class="token punctuation">-</span> gtk2hs<span class="token punctuation">-</span>buildtools<span class="token punctuation">-</span>0.13.8.3
  <span class="token punctuation">-</span> plot<span class="token punctuation">-</span>0.2.3.11
  <span class="token comment"># - static-canvas-0.2.0.3</span>
  <span class="token punctuation">-</span> statestack<span class="token punctuation">-</span><span class="token number">0.3</span>
  <span class="token punctuation">-</span> dual<span class="token punctuation">-</span>tree<span class="token punctuation">-</span>0.2.2.1
  <span class="token punctuation">-</span> monoid<span class="token punctuation">-</span>extras<span class="token punctuation">-</span><span class="token number">0.6</span>
  <span class="token punctuation">-</span> svg<span class="token punctuation">-</span>builder<span class="token punctuation">-</span>0.1.1
  <span class="token punctuation">-</span> force<span class="token punctuation">-</span>layout<span class="token punctuation">-</span>0.4.0.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个过程是传递性的，换句话说即将一个不存在于包集的包添加进去时，需要确保它所有的依赖在包集中，并且版本是正确的。至于如何选择每个版本，需要用户自己根据版本约束判断（运行 <code>stack</code><br> 可以在错误信息中看到约束）。这是非常痛苦的过程，并且通常项目需要为每个目标 GHC 版本选择一个 Stackage<br> 包集然后重复这件事很多次。但是由于其稳定性（有效减少了版本不一致的问题），仍然有很大一部分用户选择使用 Stack。</p><h2 id="nixpkgs-和-haskell" tabindex="-1"><a class="header-anchor" href="#nixpkgs-和-haskell"><span>Nixpkgs 和 Haskell</span></a></h2>`,3),xn=n("br",null,null,-1),fn=n("br",null,null,-1),Hn=n("br",null,null,-1),yn={href:"https://github.com/input-output-hk/haskell.nix",target:"_blank",rel:"noopener noreferrer"},Cn=n("br",null,null,-1),Nn=n("code",null,".cabal",-1),Sn=n("br",null,null,-1),wn=n("br",null,null,-1),Pn=n("br",null,null,-1),qn=n("br",null,null,-1),Gn=l(`<h3 id="haskell-derivation" tabindex="-1"><a class="header-anchor" href="#haskell-derivation"><span>Haskell derivation</span></a></h3><p>Nix 用户可能熟悉 <code>stdenv</code> 中的 <code>mkDerivation</code>：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>stdenv<span class="token punctuation">.</span>mkDerivation <span class="token punctuation">{</span>
  name <span class="token operator">=</span> <span class="token string">&quot;libfoo-2.3.3&quot;</span><span class="token punctuation">;</span>
  src <span class="token operator">=</span> <span class="token function">fetchurl</span> <span class="token punctuation">{</span>
    url <span class="token operator">=</span> <span class="token url">http://example.org/libfoo-2.3.3.tar.gz</span><span class="token punctuation">;</span>
    sha256 <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  buildInputs <span class="token operator">=</span> <span class="token punctuation">[</span> perl ncurses <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Fn=n("code",null,"./configure",-1),On=n("code",null,"make",-1),Dn=n("br",null,null,-1),Bn=n("br",null,null,-1),Tn={href:"https://nixos.wiki/wiki/Python",target:"_blank",rel:"noopener noreferrer"},zn=l(`<div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>buildPythonPackage rec <span class="token punctuation">{</span>
  pname <span class="token operator">=</span> <span class="token string">&quot;deserialize&quot;</span><span class="token punctuation">;</span>
  version <span class="token operator">=</span> <span class="token string">&quot;1.8.3&quot;</span><span class="token punctuation">;</span>
  src <span class="token operator">=</span> fetchPypi <span class="token punctuation">{</span>
    <span class="token keyword">inherit</span> pname version<span class="token punctuation">;</span>
    sha256 <span class="token operator">=</span> <span class="token string">&quot;sha256-0aozmQ4Eb5zL4rtNHSFjEynfObUkYlid1PgMDVmRkwY=&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  doCheck <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  propagatedBuildInputs <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment"># Specify dependencies</span>
    pkgs<span class="token punctuation">.</span>python3Packages<span class="token punctuation">.</span>numpy
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 Nixpkgs 中维护了 Python 包集，每个包都对应一个 Nix derivation。得益于 derivation 的概念，derivations<br> 可以作为构建输入，达到由发行版包管理满足编程语言依赖需求的效果。Haskell 的框架与之十分类似，尽管更加复杂。以 <code>wxc</code> 为例，它的<br> Nix 表达式（来源于 <code>cabal2nix</code>）是：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span> mkDerivation<span class="token punctuation">,</span> base<span class="token punctuation">,</span> bytestring<span class="token punctuation">,</span> Cabal<span class="token punctuation">,</span> directory<span class="token punctuation">,</span> filepath<span class="token punctuation">,</span> process<span class="token punctuation">,</span> split<span class="token punctuation">,</span> wxdirect <span class="token punctuation">}</span><span class="token punctuation">:</span>
mkDerivation <span class="token punctuation">{</span>
  pname <span class="token operator">=</span> <span class="token string">&quot;wxc&quot;</span><span class="token punctuation">;</span>
  version <span class="token operator">=</span> <span class="token string">&quot;0.92.3.0&quot;</span><span class="token punctuation">;</span>
  sha256 <span class="token operator">=</span> <span class="token string">&quot;0i7z4avy57qzrykz3kddfn313zddp3lnyl9a0krx5f2k3b2pz8i8&quot;</span><span class="token punctuation">;</span>
  revision <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
  editedCabalFile <span class="token operator">=</span> <span class="token string">&quot;1cgq577ddskmp1xdlnlz0581r8hsqblgxc7wy0avb7sgf181cbd4&quot;</span><span class="token punctuation">;</span>
  setupHaskellDepends <span class="token operator">=</span>
    <span class="token punctuation">[</span> base bytestring Cabal directory filepath process split <span class="token punctuation">]</span><span class="token punctuation">;</span>
  libraryHaskellDepends <span class="token operator">=</span> <span class="token punctuation">[</span> base split wxdirect <span class="token punctuation">]</span><span class="token punctuation">;</span>
  librarySystemDepends <span class="token operator">=</span> <span class="token punctuation">[</span> pkgs<span class="token punctuation">.</span>libGL pkgs<span class="token punctuation">.</span>libX11 <span class="token punctuation">]</span><span class="token punctuation">;</span>
  libraryPkgconfigDepends <span class="token operator">=</span> <span class="token punctuation">[</span> pkgs<span class="token punctuation">.</span>wxGTK <span class="token punctuation">]</span><span class="token punctuation">;</span>
  doHaddock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  postInstall <span class="token operator">=</span> <span class="token string">&quot;cp -v dist/build/libwxc.so.0.92.3.0 $out/lib/libwxc.so&quot;</span><span class="token punctuation">;</span>
  postPatch <span class="token operator">=</span> <span class="token string">&quot;sed -i -e &#39;/ldconfig inst_lib_dir/d&#39; Setup.hs&quot;</span><span class="token punctuation">;</span>
  description <span class="token operator">=</span> <span class="token string">&quot;wxHaskell C++ wrapper&quot;</span><span class="token punctuation">;</span>
  license <span class="token operator">=</span> <span class="token string">&quot;unknown&quot;</span><span class="token punctuation">;</span>
  hydraPlatforms <span class="token operator">=</span> lib<span class="token punctuation">.</span>platforms<span class="token punctuation">.</span>none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),An=n("code",null,"scope",-1),In=n("code",null,"callPackage",-1),En=n("br",null,null,-1),jn=n("code",null,"haskellPackages",-1),Ln=n("code",null,"pkgs",-1),Mn=n("br",null,null,-1),Un=n("code",null,"librarySystemDepends",-1),Jn=n("code",null,"pkgs",-1),Vn=n("code",null,"haskellPackages.callPackage",-1),$n=n("br",null,null,-1),Wn=n("code",null,"mkDerivation",-1),Zn=n("br",null,null,-1),Rn={href:"https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/haskell-modules/generic-builder.nix",target:"_blank",rel:"noopener noreferrer"},Yn=n("br",null,null,-1),Kn=n("code",null,"mkDerivation",-1),Qn=n("br",null,null,-1),Xn=n("code",null,"./Setup.hs configure",-1),ns=n("code",null,"./Setup.hs build",-1),ss=n("br",null,null,-1),as=n("code",null,"passthru",-1),es=n("code",null,"envFunc",-1),ls=n("br",null,null,-1),ts=n("h3",{id:"haskell-包集与顶层",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#haskell-包集与顶层"},[n("span",null,"Haskell 包集与顶层")])],-1),os=n("br",null,null,-1),is=n("code",null,"cabal2nix",-1),cs=n("code",null,"wxc",-1),ps=n("br",null,null,-1),us={href:"https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/haskell-modules/hackage-packages.nix",target:"_blank",rel:"noopener noreferrer"},ds=n("br",null,null,-1),rs=n("br",null,null,-1),ks=n("code",null,"configuration-hackage2nix/broken.yaml",-1),vs=n("br",null,null,-1),hs=n("code",null,"isBroken = true",-1),bs=n("code",null,"configuration-x.nix",-1),gs=n("br",null,null,-1),ms=l(`<ul><li><p><code>configuration-{arm,darwin}.nix</code> - 特定系统架构上需要的修改，例如在某些架构上一些包的测试或编译无法通过，需要打补丁修复/禁用测试/添加依赖，例如在<br> drawin 配置中有 <code>hmatrix = addBuildDepend darwin.apple_sdk.frameworks.Accelerate super.hmatrix</code>。</p></li><li><p><code>configuration-ghc-x.nix</code> - 特定 GHC 版本上需要的修改，通常每个版本都需要将 GHC Boot Libraries 设置为 <code>null</code>。还有一些包的受<br> GHC 版本影响，它们需要在这里手动指定版本，例如在 GHC 8 的配置中有 <code>ghc-lib = doDistribute self.ghc-lib_8_10_7_20220219</code>。</p></li><li><p><code>configuration-common.nix</code> - 与前面特定架构的修改相似，但是它们与架构无关，通常是打一些补丁、jailbreak 等等。</p></li><li><p><code>configuration-nix.nix</code> - 因为 Nix<br> 带来问题而需要作出的修改。大部分是禁用测试，因为在构建时没有网络。还有一些是添加 <code>cabal2nix</code> 未能发现的依赖，例如一些需要运行期依赖其他软件的<br> Haskell 程序也在这里被 wrap。</p></li></ul><p>这些配置都是 extension，即形如 <code>self: super: {...}</code> 的函数。它们合并到一起并应用到 <code>haskellPackages</code><br> 上。事实上 <code>haskellPackages</code> 是 extensible 的，即该 AttrSet 有 <code>extend</code> 字段，方便用户在其上应用自己的修改。这在后文中搭建开发环境会用到。每个<br> GHC 版本都有一个对应的 <code>haskellPackages</code>，即 Haskell 包集和工具链。在 repl 中可以看到：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>haskell.packages.ghc810                haskell.packages.ghc924Binary
haskell.packages.ghc8102Binary         haskell.packages.ghc924BinaryMinimal
haskell.packages.ghc8102BinaryMinimal  haskell.packages.ghc925
haskell.packages.ghc8107               haskell.packages.ghc926
haskell.packages.ghc8107Binary         haskell.packages.ghc94
haskell.packages.ghc8107BinaryMinimal  haskell.packages.ghc942
haskell.packages.ghc865Binary          haskell.packages.ghc943
haskell.packages.ghc88                 haskell.packages.ghc944
haskell.packages.ghc884                haskell.packages.ghcHEAD
haskell.packages.ghc90                 haskell.packages.ghcjs
haskell.packages.ghc902                haskell.packages.ghcjs810
haskell.packages.ghc92
haskell.packages.ghc924
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而位于顶层的 <code>haskellPackages</code> 是人为定下的主流 GHC 版本，在本文编写时它导出了 <code>haskell.packages.ghc92</code>。诸如 <code>pandoc</code> 的<br> Haskell 程序通常在顶层被导出时会对相应 derivation 应用 <code>justStaticExecutables</code>，即静态链接可执行文件、避免应用程序依赖<br> Haskell 库和 GHC。许多该类修改位于前文所述的 <code>configuration-nix.nix</code> 中，也有一部分在顶层或者该包自己的 <code>.nix</code><br> 中。还有一个常用的函数集 <code>haskell.lib</code> 和 <code>haskell.packageOverrides</code>。前者是一个<br> AttrSet，包含了前文中提到的 <code>addBuildDepend</code>、<code>doDistribute</code>、<code>justStaticExecutables</code> 等调整 Haskell derivation 的函数；后者是一个<br> extension，它总是会被应用到所有 GHC 版本的 <code>haskellPackages</code> 上。因此，用户可以写诸如：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>final<span class="token punctuation">:</span> prev<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  haskell <span class="token operator">=</span> prev<span class="token punctuation">.</span>haskell <span class="token operator">//</span> <span class="token punctuation">{</span>
    packageOverrides <span class="token operator">=</span> hfinal<span class="token punctuation">:</span> hprev<span class="token punctuation">:</span>
      hprev<span class="token punctuation">.</span>haskell<span class="token punctuation">.</span>packageOverrides hfinal hprev <span class="token operator">//</span> <span class="token punctuation">{</span>
        <span class="token comment"># ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>的 overlay 来 override 整个 <code>haskell</code>。若要单独 override 某个 <code>haskellPackages</code>，可以用以下 overlay（其中 <code>haskellPackages</code><br> 可被 <code>haskell.packages.ghc94</code> 等替代）：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>final<span class="token punctuation">:</span> prev<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  haskellPackages <span class="token operator">=</span> prev<span class="token punctuation">.</span>haskellPackages<span class="token punctuation">.</span>override <span class="token punctuation">(</span>old<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    overrides <span class="token operator">=</span> final<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>composeExtensions <span class="token punctuation">(</span>old<span class="token punctuation">.</span>overrides <span class="token keyword">or</span> <span class="token punctuation">(</span>_<span class="token punctuation">:</span> _<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">(</span>hfinal<span class="token punctuation">:</span> hprev<span class="token punctuation">:</span>
        <span class="token punctuation">{</span>
          <span class="token comment"># ...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后文中会介绍具体应用它们的例子。</p><h2 id="搭建开发环境" tabindex="-1"><a class="header-anchor" href="#搭建开发环境"><span>搭建开发环境</span></a></h2><p>前文大致讲述了 Nixpkgs 中的 Haskell 基础设施，但是搭建 Haskell 开发环境不一定完全依赖于 Nixpkgs 中的包集。Nix<br> 语境中的搭建开发环境通常指构建出 dev shell 其中包含所需的开发工具以及依赖。</p><h3 id="只用-nix-获取编译器和包管理器" tabindex="-1"><a class="header-anchor" href="#只用-nix-获取编译器和包管理器"><span>只用 Nix 获取编译器和包管理器</span></a></h3><p>如果用户不想借助 Nix 来实现缓存或可重现（用 derivation 来打包），那么用户可以仅使用 Nixpkgs 中的 GHC 和 <code>cabal-install</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$nix</span>-shell <span class="token parameter variable">-p</span> <span class="token string">&quot;haskellPackages.ghcWithPackages (pkgs: with pkgs; [ cabal-install ])&quot;</span>&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),_s=n("code",null,"cabal init",-1),xs=n("code",null,"cabal build",-1),fs=n("br",null,null,-1),Hs=n("code",null,"stack",-1),ys=n("br",null,null,-1),Cs={href:"https://docs.haskellstack.org/en/stable/nix_integration/",target:"_blank",rel:"noopener noreferrer"},Ns=n("br",null,null,-1),Ss=l(`<h3 id="nixpkgs" tabindex="-1"><a class="header-anchor" href="#nixpkgs"><span>Nixpkgs</span></a></h3><p>可能使用 Nixpkgs 的 Haskell 基础设施创建 dev shell 是很多用户的选择。理想情况下，用户不需要在自己的机器上编译任意一个依赖，dev<br> shell 将提供好一切。这样做的好处还有可以减少未来该 Haskell 程序在 Nixpkgs 中分发所需的努力，因为在一些情况下 dev shell<br> 可以直接来源于 derivation 的 <code>envFunc</code>，而有了 derivation 就相当于在 Nix 中打出了这个包。当然，如果因为各种疑难问题不容易构造出<br> derivation 或者满足依赖要求，最终可以诉诸于 <code>cabal-install</code>。但这对分发是没有好处的，因为本质上依赖了开发者的环境。</p><h4 id="developpackage" tabindex="-1"><a class="header-anchor" href="#developpackage"><span>developPackage</span></a></h4><p>对于简单项目而言，<code>developPackage</code> 是一个很好来创建 dev shell 的办法。假设项目仅包含单包，即没有使用 <code>cabal.project</code><br> 将多个包一起构建，以下代码片段可构造带有 <code>cabal-install</code> 和 <code>haskell-language-server</code> 的 dev shell：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>pkgs<span class="token punctuation">.</span>haskellPackages<span class="token punctuation">.</span>developPackage <span class="token punctuation">{</span>
  root <span class="token operator">=</span> <span class="token url">./.</span><span class="token punctuation">;</span>
  modifier <span class="token operator">=</span> drv<span class="token punctuation">:</span>
    pkgs<span class="token punctuation">.</span>haskell<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>addBuildTools drv <span class="token punctuation">(</span><span class="token punctuation">[</span>
      pkgs<span class="token punctuation">.</span>cabal<span class="token operator">-</span>install
      pkgs<span class="token punctuation">.</span>haskell<span class="token operator">-</span>language<span class="token operator">-</span>server
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>modifier</code> 函数会应用到构建出的 derivation 上，这里的例子手动添加了两个依赖，它们会进入到 dev shell 中。如果需要 override<br> 包集，可以在参数添加 <code>overrides</code> 函数：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>pkgs<span class="token punctuation">.</span>haskellPackages<span class="token punctuation">.</span>developPackage <span class="token punctuation">{</span>
  root <span class="token operator">=</span> <span class="token url">./.</span><span class="token punctuation">;</span>
  overrides <span class="token operator">=</span> hfinal<span class="token punctuation">:</span> hprev<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    github <span class="token operator">=</span> pkgs<span class="token punctuation">.</span>haskell<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>overrideCabal hprev<span class="token punctuation">.</span>github <span class="token punctuation">(</span>drv<span class="token punctuation">:</span> <span class="token punctuation">{</span> patches <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码修改了 <code>github</code> 的 derivation，移除了其中的补丁。此外，还有 <code>source-overrides</code> AttrSet 可以指定包集中一些包的源码：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code>pkgs<span class="token punctuation">.</span>haskellPackages<span class="token punctuation">.</span>developPackage <span class="token punctuation">{</span>
  root <span class="token operator">=</span> <span class="token url">./.</span><span class="token punctuation">;</span>
  source<span class="token operator">-</span>overrides <span class="token operator">=</span> <span class="token punctuation">{</span>
    foo <span class="token operator">=</span> <span class="token url">./foo</span><span class="token punctuation">;</span>
    graphviz <span class="token operator">=</span> <span class="token string">&quot;2999.20.0.4&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码为包集添加了本地的 <code>foo</code>，覆盖 <code>graphviz</code> 的版本为 <code>2999.20.0.4</code>。事实上 <code>source-overrides</code><br> 传给了 <code>haskell.lib.packageSourceOverrides</code>，后者判断如果值是一个路径，就对它调用 <code>callCabal2nix</code><br> ；如果是字符串，就对它调用 <code>callHackage</code>。<code>developPackage</code> 的源码如下：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code> developPackage <span class="token operator">=</span>
   <span class="token punctuation">{</span> root
   <span class="token punctuation">,</span> name <span class="token operator">?</span> lib<span class="token punctuation">.</span>optionalString <span class="token punctuation">(</span><span class="token keyword">builtins</span><span class="token punctuation">.</span><span class="token function">typeOf</span> root <span class="token operator">==</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">builtins</span><span class="token punctuation">.</span><span class="token function">baseNameOf</span> root<span class="token punctuation">)</span>
   <span class="token punctuation">,</span> source<span class="token operator">-</span>overrides <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
   <span class="token punctuation">,</span> overrides <span class="token operator">?</span> self<span class="token punctuation">:</span> super<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
   <span class="token punctuation">,</span> modifier <span class="token operator">?</span> drv<span class="token punctuation">:</span> drv
   <span class="token punctuation">,</span> returnShellEnv <span class="token operator">?</span> pkgs<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>inNixShell
   <span class="token punctuation">,</span> withHoogle <span class="token operator">?</span> returnShellEnv
   <span class="token punctuation">,</span> cabal2nixOptions <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">:</span>
   <span class="token keyword">let</span> drv <span class="token operator">=</span>
     <span class="token punctuation">(</span>extensible<span class="token operator">-</span>self<span class="token punctuation">.</span>extend
        <span class="token punctuation">(</span>pkgs<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>composeExtensions
           <span class="token punctuation">(</span>self<span class="token punctuation">.</span>packageSourceOverrides source<span class="token operator">-</span>overrides<span class="token punctuation">)</span>
           overrides<span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span>callCabal2nixWithOptions name root cabal2nixOptions <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token keyword">in</span> <span class="token keyword">if</span> returnShellEnv
        <span class="token keyword">then</span> <span class="token punctuation">(</span>modifier drv<span class="token punctuation">)</span><span class="token punctuation">.</span>envFunc <span class="token punctuation">{</span><span class="token keyword">inherit</span> withHoogle<span class="token punctuation">;</span><span class="token punctuation">}</span>
        <span class="token keyword">else</span> modifier drv<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难看出它先把 <code>source-overrides</code> 交给 <code>haskell.lib.packageSourceOverrides</code> 得到一个<br> extension（形如 <code>self: super: {&lt;包名&gt; = &lt;drv&gt;}</code> 的函数），再把 <code>overrides</code>（也是同样的 extension）和它 compose<br> 到一起，修改包集后调用 <code>callCabal2nix</code>，再应用 <code>modifier</code> 到结果上。这样以来，<code>developPackage</code> 是在构建位于 <code>root</code> Haskell<br> 包的 derivation，并且根据需求返回 derivation 本身，或者它的 <code>envFunc</code>。<code>envFunc</code> 在前文提到过，旨在为该 Haskell derivation<br> 创建 dev shell。将上面调用 <code>developPackage</code> 的代码放到 <code>default.nix</code> 即可（不要忘记指定 <code>pkgs</code>），在该目录下运行 <code>nix-build</code><br> 可构建出该包的 derivation；运行 <code>nix-shell</code> 可进入 dev shell。</p><h4 id="shellfor" tabindex="-1"><a class="header-anchor" href="#shellfor"><span>shellFor</span></a></h4>`,13),ws=n("code",null,"developPackage",-1),Ps=n("code",null,"shellFor",-1),qs=n("br",null,null,-1),Gs=n("code",null,"cabal.package",-1),Fs={href:"https://nixos.wiki/wiki/Haskell",target:"_blank",rel:"noopener noreferrer"},Os=l(`<div class="language-cabal line-numbers-mode" data-ext="cabal" data-title="cabal"><pre class="language-cabal"><code>packages:
  frontend/
  backend/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下代码可以创建相应的 dev shell：</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">(</span>pkgs<span class="token punctuation">.</span>haskellPackages<span class="token punctuation">.</span>extend <span class="token punctuation">(</span>pkgs<span class="token punctuation">.</span>haskell<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>packageSourceOverrides <span class="token punctuation">{</span>
  frontend <span class="token operator">=</span> <span class="token url">./frontend</span><span class="token punctuation">;</span>
  backend <span class="token operator">=</span> <span class="token url">./backend</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shellFor <span class="token punctuation">{</span>
  packages <span class="token operator">=</span> p<span class="token punctuation">:</span> <span class="token punctuation">[</span> p<span class="token punctuation">.</span>frontend p<span class="token punctuation">.</span>backend <span class="token punctuation">]</span><span class="token punctuation">;</span>
  buildInputs <span class="token operator">=</span> <span class="token punctuation">[</span> pkgs<span class="token punctuation">.</span>haskell<span class="token operator">-</span>language<span class="token operator">-</span>server pkgs<span class="token punctuation">.</span>cabal<span class="token operator">-</span>install <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出首先本地的 <code>frontend</code> 和 <code>backend</code> 被添加到包集，然后 <code>shellFor</code> 接受了 <code>packages</code> 函数和 <code>buildInputs</code><br> 列表。后者很好理解，相当于非 Haskell 的额外依赖。但前者是什么呢？事实上 <code>shellFor</code> 和 <code>developPackage</code><br> 完成的操作完全不同：<code>developPackage</code> 是修改包集后构造项目的 Haskell derivation；而 <code>shellFor</code> 是按类别筛选出 <code>packages</code><br> 函数所返回列表中所有 Haskell derivations 的依赖后，构造一个临时的 Haskell<br> derivation，使得它的依赖是上一部步的筛选结果，并对它调用 <code>envFunc</code>。换句话说，<code>shellFor</code> 基本上是创建一个包含项目中所有依赖的<br> dev shell，但是不构建项目本身。它的源码比较长，就不在这里贴出了。<code>shellFor</code> 的返回结果只能被用来创建 dev<br> shell，而不能构建包。因此可以将该段代码放进 <code>shell.nix</code> 中，运行 <code>nix-shell</code> 即可进入 dev shell。</p><h4 id="envfunc" tabindex="-1"><a class="header-anchor" href="#envfunc"><span>envFunc</span></a></h4>`,5),Ds=n("code",null,"developPackage",-1),Bs=n("code",null,"shellFor",-1),Ts=n("code",null,"envFunc",-1),zs=n("code",null,"envFunc",-1),As=n("br",null,null,-1),Is=n("code",null,"envFunc",-1),Es=n("br",null,null,-1),js={href:"https://github.com/The-closed-eye-of-love/pixiv",target:"_blank",rel:"noopener noreferrer"},Ls=l(`<div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span>
  inputs<span class="token punctuation">.</span>nixpkgs<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&quot;github:NixOS/nixpkgs/nixos-unstable&quot;</span><span class="token punctuation">;</span>
  inputs<span class="token punctuation">.</span>flake<span class="token operator">-</span>utils<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&quot;github:numtide/flake-utils&quot;</span><span class="token punctuation">;</span>

  outputs <span class="token operator">=</span> <span class="token punctuation">{</span> self<span class="token punctuation">,</span> nixpkgs<span class="token punctuation">,</span> flake<span class="token operator">-</span>utils<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">:</span>
    flake<span class="token operator">-</span>utils<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>eachDefaultSystem <span class="token punctuation">(</span>system<span class="token punctuation">:</span>
      <span class="token keyword">let</span>
        pkgs <span class="token operator">=</span> <span class="token function">import</span> nixpkgs <span class="token punctuation">{</span>
          <span class="token keyword">inherit</span> system<span class="token punctuation">;</span>
          overlays <span class="token operator">=</span> <span class="token punctuation">[</span> self<span class="token punctuation">.</span>overlays<span class="token punctuation">.</span>default <span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">in</span> <span class="token keyword">with</span> pkgs<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        devShells<span class="token punctuation">.</span>default <span class="token operator">=</span> pixiv<span class="token operator">-</span>dev<span class="token punctuation">.</span>envFunc <span class="token punctuation">{</span> withHoogle <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        packages<span class="token punctuation">.</span>default <span class="token operator">=</span> pixiv<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token punctuation">{</span>
        overlays<span class="token punctuation">.</span>default <span class="token operator">=</span> final<span class="token punctuation">:</span> prev<span class="token punctuation">:</span>
          <span class="token keyword">let</span>
            hpkgs <span class="token operator">=</span> prev<span class="token punctuation">.</span>haskellPackages<span class="token punctuation">;</span>
            linkHaddockToHackage <span class="token operator">=</span> drv<span class="token punctuation">:</span>
              prev<span class="token punctuation">.</span>haskell<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>overrideCabal drv <span class="token punctuation">(</span>drv<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                haddockFlags <span class="token operator">=</span> <span class="token punctuation">[</span>
                  <span class="token string">&quot;--html-location=&#39;https://hackage.haskell.org/package/$pkg-$version/docs&#39;&quot;</span>
                <span class="token punctuation">]</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pixiv <span class="token operator">=</span> <span class="token keyword">with</span> prev<span class="token punctuation">.</span>haskell<span class="token punctuation">.</span>lib<span class="token punctuation">;</span>
              linkHaddockToHackage <span class="token punctuation">(</span>disableLibraryProfiling
                <span class="token punctuation">(</span>dontCheck <span class="token punctuation">(</span>hpkgs<span class="token punctuation">.</span>callCabal2nix <span class="token string">&quot;pixiv&quot;</span> <span class="token url">./.</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">in</span> <span class="token keyword">with</span> prev<span class="token punctuation">;</span>
          <span class="token keyword">with</span> haskell<span class="token punctuation">.</span>lib<span class="token punctuation">;</span> <span class="token punctuation">{</span>
            <span class="token keyword">inherit</span> pixiv<span class="token punctuation">;</span>
            pixiv<span class="token operator">-</span>dev <span class="token operator">=</span>
              addBuildTools pixiv <span class="token punctuation">[</span> haskell<span class="token operator">-</span>language<span class="token operator">-</span>server cabal<span class="token operator">-</span>install <span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里并没有修改 Haskell 包集，而是使用 <code>callCabal2nix</code> 创建了 <code>pixiv</code> 的 Haskell derivation，同时对该 derivation<br> 作出了一系列修改，例如 <code>dontCheck</code> 和 <code>disableLibraryProfiling</code>。<code>pixiv-dev</code> 则是 <code>pixiv</code><br> 添加上两个必要的开发工具，它唯一的用处是将它的 <code>envFunc</code> 导出到 flake 的 <code>devShells.default</code> 用于创建 dev<br> shell（使用 <code>nix develop</code>）。而被当成 <code>packages.default</code> 导出的则是 <code>pixiv</code> 这个 Haskell derivation。在其他 flake 中，可以直接将该<br> flake 添加为 input，并使用导出的 <code>pixiv</code>。由此可见，自己调用 <code>envFunc</code> 搭配上 flake 可以更灵活地创建开发环境以及分发程序。</p><h3 id="haskell-nix" tabindex="-1"><a class="header-anchor" href="#haskell-nix"><span>haskell.nix</span></a></h3>`,3),Ms=n("br",null,null,-1),Us={href:"https://input-output-hk.github.io/haskell.nix/",target:"_blank",rel:"noopener noreferrer"},Js=n("h2",{id:"一些注意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一些注意"},[n("span",null,"一些注意")])],-1),Vs=n("p",null,"在使用 Nixpkgs 的 Haskell 基础设施时，有些常见问题需要注意。它们中的一些是仍未解决的。",-1),$s=n("h3",{id:"ifd",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ifd"},[n("span",null,"IFD")])],-1),Ws=n("code",null,"callCabal2nix",-1),Zs={href:"https://nixos.wiki/wiki/Import_From_Derivation",target:"_blank",rel:"noopener noreferrer"},Rs=n("br",null,null,-1),Ys=n("code",null,"flake show",-1),Ks=n("code",null,"flake check",-1),Qs=n("h3",{id:"依赖版本",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#依赖版本"},[n("span",null,"依赖版本")])],-1),Xs=n("p",null,[s("Nixpkgs 这套基础设施并不会考虑包的版本，读者应该已经清楚 Nixpkgs 中 Haskell"),n("br"),s(" 包集的结构："),n("code",null,"{ <包名> = <drv>; <包名> = <drv>; }"),s("。这和 Nixpkgs 中其他语言的基础设施是一致的，因此在一些情况下用户可能需要自己解决依赖冲突的问题。")],-1),na=n("h3",{id:"引用泄露",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#引用泄露"},[n("span",null,"引用泄露")])],-1),sa=n("br",null,null,-1),aa=n("code",null,"justStaticExecutables",-1),ea=n("br",null,null,-1),la={href:"https://github.com/NixOS/nixpkgs/issues/34376",target:"_blank",rel:"noopener noreferrer"},ta=n("br",null,null,-1);function oa(ia,ca){const a=o("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[s("除了软件开发过程本身外，软件分发也是很重要的一个话题。在发行版上建立编程语言生态系统可能不是一件简单的事情。本文将引入 "),n("a",d,[s("NixOS/nixpkgs"),e(a)]),r,s(" 中 Haskell 相关的基础知识，并说明如何使用 Nix 搭建科学的 Haskell 开发环境。")]),k,n("p",null,[s("当运行 "),v,s("、"),h,s(" 时，调用的是 "),b,s(" 中的代码。发行版通常会选择这种方式来构建"),g,s(" Haskell 包，而不是开发者常用的 "),m,s("，因为在这种情况下由发行版的包管理提供 Haskell 包需要的依赖，而不是 Haskell"),_,s(" 的包管理提供。注意 "),x,f,s(" 只会检查依赖及环境是否满足要求（考虑版本约束与系统架构等等）而不会去真正地管理依赖（下载并构建缺失依赖）。真正提供包管理功能的是 "),H,y,s(" ，即命令行程序 "),C,s("（后文将使用该命名作为简写，注意它与 "),N,s(" 不同）。它是一个依赖 "),S,s(" 的 Haskell 程序，提供依赖解析、下载"),w,s(" Haskell 包源码等功能。在 2.0 版本后，"),P,s(" 引入了类似 Nix Store 的概念——在 "),q,s(" 目录下存在一个 global"),G,s(" store，包含包的编译结果。Haskell 包在 "),n("a",F,[s("Hakcage"),e(a)]),s(" 由开发者上发布，因此当需要编译一个包时，如果该包的依赖不存在于"),O,s(" global store 中，"),D,s(" 会从 Hackage 上下载源码，并先编译该依赖，存到 global store 中。当依赖处理完成时，"),B,T,s(" 会在项目的目录下创建一个临时的 包集传给 GHC 内建包管理，再调用 "),z,s(" 构建系统编译。这个过程类似沙盒构建：global store"),A,s(" 用于共享已编译依赖、项目之间的依赖互不干扰。这和 Nix 的思想如出一辙，"),I,s(" 将这个功能命名为 Nix-style local builds。然而在"),E,s(" 1 版本时代，"),j,s(" 只维护一个全局包集而不是可以共享的 global store，如同 FHS"),L,s(" 发行版那样，每个依赖只能有一个版本安装在包集里。然而编程语言包的维护很难做到发行版软件包那样细致，并且也没有人来解决冲突问题——每个用户的包集是不一样的，面对冲突用户只能自己想办法。举个例子，开发"),M,s(" A 项目需要 "),U,s("，但是 "),J,s(" 需要 "),V,s(" 由于依赖版本冲突，为了同时能够构建项目"),$,s(" A 并且安装 "),W,s("，用户只能自行在 "),Z,s(" 中指定版本号解决冲突。在当时无法直接安装一个 Haskell 程序或者构建一个"),R,s(" Haskell 项目是非常常见的，并且在面对 GHC 版本改变时，事情会变得更糟。")]),Y,n("p",null,[s("这时，新的包管理器 Stack 诞生了。正如前文已经所述，在旧 "),K,s(" 时代 Haskell"),Q,s(" 程序员天天面对的是依赖火葬场。既然用户因为各种版本不一致难以维护自己的包集，那么是不是可以像维护 Linux"),X,s(" 发行版那样，帮用户维护一个呢？这就是 "),n("a",nn,[s("Stackage"),e(a)]),s("。为了避免不同 GHC 版本带来包版本的变化 Stackage"),sn,s(" 还指定了 GHC 版本。例如在本文编写时最新的 LTS 版本是 "),n("a",an,[s("LTS 20.13 for ghc-9.2.7"),e(a)]),en,s(" 。与某些发行版相似，Stackage 有一个 nightly 的滚动版本以及定期发布 LTS 版本，必要时会将新的变动向后移植到 LTS 版本中。Stack"),ln,s(" 可以代替 "),tn,s(" 作为 Haskell 开发者的包管理工具，同时 "),n("a",on,[s("hpack"),e(a)]),s(" 使用户能用 "),cn,pn,s(" 而不是 "),un,s(" 来配置项目：")]),dn,n("p",null,[s("相信不少读者的第一个 Haskell 项目可能就是用 "),rn,s(" 创建并构建的。Stack 作为构建系统同样依赖 "),kn,vn,s(" ，只是使用了不同的依赖管理策略——让用户使用现成的包集。然而这里存在一个问题：如果用户需要使用一个 Stackage"),hn,s(" 包集没有的包，或者没有相应版本的包，用户需要手动将想要的版本或者包的源码添加到 "),bn,gn,s(" 中，例如："),n("a",mn,[s("IHaskell/stack-8.10.yaml"),e(a)]),s("：")]),_n,n("p",null,[s("前文已经介绍 Haskell 的包管理工具，但它们是面向 Haskell 开发者的，而不是使用 Haskell"),xn,s(" 程序的用户。对于发行版而言，优先满足最终用户的需求可能是首要目标，因为开发者总是可以使用编程语言的包管理器搭建开发环境。如果发行版能提供一定便利自然更好，但这不是必要的。Nixpkgs"),fn,s(" 提供了一个较为先进的 Haskell 基础设施，不光方便分发 Haskell 程序，同时提升了 Haskell 开发者的体验。离题一下，除了"),Hn,s(" Nixpkgs，"),n("a",yn,[s("input-output-hk/haskell.nix"),e(a)]),s(" 提供了另一个 Haskell 基础设施：与"),Cn,s(" Nixpkgs 相比它更为复杂，适用于更复杂的项目。例如它使用 Nix 语言抽象了类似 "),Nn,s(" 的 Haskell"),Sn,s(" 包配置文件；它还抽象了一个包的构建计划，其中包含该包的依赖集以及编译器版本、参数等等。用户可以从 Stackage 或者 Cabal plan 创建"),wn,s(" Haskell 包的构建计划，完成对依赖的细粒度控制。这些都是 Nixpkgs 中没有的功能。因为可自定义化程度高，这个基础设施在没有 cachix"),Pn,s(" 缓存的情况下是难以使用的——用户可能轻而易举就需要编译多次 GHC 以及各种配置不同的 Haskell 依赖。本文将重点目光放在 Nixpkgs"),qn,s(" 中的基础设施中。")]),Gn,n("p",null,[s("标准环境提供了用于构建 Unix 软件包的环境，自动化了诸如 "),Fn,s("、"),On,s(" 等步骤。在这基础上扩展，对于不同语言不同工具链可以衍生出相应的"),Dn,s(" derivation 生成函数，或者叫构建步骤，从而搭建出该语言的框架。例如构建一个 Python"),Bn,s(" 包看起来是这样的（来源于 "),n("a",Tn,[s("NixOS Wiki"),e(a)]),s("）：")]),zn,n("p",null,[s("Haskell 基础设施拥有类似的 "),An,s(" 与 "),In,s(" 机制——通常一个包对应的 Nix 表达式是一个函数，它接受其他 derivations"),En,s(" 作为构建输入。注意这里函数参数都是 "),jn,s(" scope 中的 derivations，而不是 "),Ln,Mn,s(" 中的。可以注意到系统依赖如 "),Un,s(" 是来自 "),Jn,s(" 的，而 "),Vn,s(" 只传递 Haskell"),$n,s(" derivation。同样，"),Wn,s(" 是 Haskell 的 generic"),Zn,s(" builder，好奇的读者可以在 "),n("a",Rn,[s("generic-builder.nix"),e(a)]),Yn,s(" 找到它的定义。基本上它包装了标准环境中的 "),Kn,s("，添加了 Haskell"),Qn,s(" 相关的构建步骤。其中核心步骤是上文提到的调用 "),Xn,s(" 与 "),ns,s(" 等。值得一提的是，Haskell"),ss,s(" derivation 还在 "),as,s(" 导出了全部构建依赖以及一个叫 "),es,s(" 的函数。它们是用于创造开发该包所需要的 Nix"),ls,s(" shell，后文会详细介绍。")]),ts,n("p",null,[s("Nixpkgs 中包含了 Hackage 所有软件包的最新版本的 Nix 表达式，尽管它们可能是无法构建的。维护者会定期对整个 Hackage"),os,s(" 运行 "),is,s("，产生如同上文 "),cs,s(" 的 Nix"),ps,s(" 表达式。生成结果位于 "),n("a",us,[s("hackage-packages.nix"),e(a)]),ds,s(" ，一个超过 10M"),rs,s(" 的文本文件。如果包因为依赖无法满足或者构建失败（包括测试失败），它会被添加进 "),ks,vs,s(" 中，使得生成出的 Nix 表达式包含 "),hs,s("。此外，该文件上级目录下有一些 "),bs,s(" 文件，它们的作用是调整"),gs,s(" scope 中包名对应的 Haskell derivations：")]),ms,n("p",null,[s("后续步骤就与在其他发行版中无二了。使用 "),_s,s(" 可以创建项目、"),xs,s(" 可以构建项目。相似地，Stack 用户也只需要在"),fs,s(" dev shell 中准备好 GHC 和 "),Hs,s("，再加上打开 Stack"),ys,s(" 的 "),n("a",Cs,[s("Nix 支持"),e(a)]),s("即可像在其他发行版那样使用。这样的缺点显而易见，用户需要从头开始编译所有依赖，无法享受"),Ns,s(" Nix 带来的优势。")]),Ss,n("p",null,[ws,s(" 在应对单包项目时比较方便，但在多包项目时就会遇到问题。"),Ps,s(" 可以为多包项目创建 dev"),qs,s(" shell。以下面项目结构 "),Gs,s(" 为例（来自 "),n("a",Fs,[s("NixOS Wiki"),e(a)]),s("）：")]),Os,n("p",null,[s("不管 "),Ds,s(" 还是 "),Bs,s("，它们最终调用的都是 "),Ts,s("。"),zs,s(" 每一个 Haskell derivation 都有的，它会创建一个含有该"),As,s(" derivation 所有 Haskell 依赖的 dev shell。如果不想使用这两个函数，也可以自己调用 "),Is,s(" 创建 dev shell。以下面使用了"),Es,s(" flakes 的代码为例（来自 "),n("a",js,[s("pixiv/flake.nix"),e(a)]),s("）：")]),Ls,n("p",null,[s("与 Nixpkgs"),Ms,s(" 大体相似，但细节不同。本文不作重点讨论，具体可参照文档："),n("a",Us,[s("Alternative Haskell Infrastructure for Nixpkgs"),e(a)]),s("。")]),Js,Vs,$s,n("p",null,[Ws,s(" 本质上依靠 "),n("a",Zs,[s("IFD"),e(a)]),s(" 工作，因此由它创建的 Haskell derivation"),Rs,s(" 无法使用 "),Ys,s(" 或者 "),Ks,s("。")]),Qs,Xs,na,n("p",null,[s("可执行 Haskell 程序不应该引用任何其他 Haskell 编译产物，例如依赖库或者文档，否则该程序将间接引用 GHC，使得 closure 大小超过"),sa,s(" 2G，显然这对一个可执行程序是不合理的。使用 "),aa,ea,s(" 可以让可执行文件静态链接，但引用泄露有时还会发生。"),n("a",la,[s("pandoc - statically linked closure-size · Issue #34376 · NixOS/nixpkgs · GitHub"),e(a)]),ta,s(" 中有对该问题具体的讨论。")])])}const da=t(p,[["render",oa],["__file","haskell.html.vue"]]),ra=JSON.parse('{"path":"/tutorials/env/dev/haskell.html","title":"Haskell 开发环境部署","lang":"zh-CN","frontmatter":{"shortTitle":"Haskell","icon":"haskell","title":"Haskell 开发环境部署","description":"以 GHC 实践","author":"Potato Hatsue","head":[["meta",{"property":"og:url","content":"https://nixos-cn.github.io/tutorials/env/dev/haskell.html"}],["meta",{"property":"og:site_name","content":"NixOS 中文"}],["meta",{"property":"og:title","content":"Haskell 开发环境部署"}],["meta",{"property":"og:description","content":"以 GHC 实践"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T16:13:40.000Z"}],["meta",{"property":"article:author","content":"Potato Hatsue"}],["meta",{"property":"article:modified_time","content":"2023-10-23T16:13:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Haskell 开发环境部署\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-23T16:13:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Potato Hatsue\\"}]}"]]},"headers":[{"level":2,"title":"Nixpkgs 中的 Haskell 基础设施","slug":"nixpkgs-中的-haskell-基础设施","link":"#nixpkgs-中的-haskell-基础设施","children":[]},{"level":2,"title":"Haskell 开发工具","slug":"haskell-开发工具","link":"#haskell-开发工具","children":[{"level":3,"title":"编译器","slug":"编译器","link":"#编译器","children":[]},{"level":3,"title":"包管理","slug":"包管理","link":"#包管理","children":[]}]},{"level":2,"title":"Nixpkgs 和 Haskell","slug":"nixpkgs-和-haskell","link":"#nixpkgs-和-haskell","children":[{"level":3,"title":"Haskell derivation","slug":"haskell-derivation","link":"#haskell-derivation","children":[]},{"level":3,"title":"Haskell 包集与顶层","slug":"haskell-包集与顶层","link":"#haskell-包集与顶层","children":[]}]},{"level":2,"title":"搭建开发环境","slug":"搭建开发环境","link":"#搭建开发环境","children":[{"level":3,"title":"只用 Nix 获取编译器和包管理器","slug":"只用-nix-获取编译器和包管理器","link":"#只用-nix-获取编译器和包管理器","children":[]},{"level":3,"title":"Nixpkgs","slug":"nixpkgs","link":"#nixpkgs","children":[]},{"level":3,"title":"haskell.nix","slug":"haskell-nix","link":"#haskell-nix","children":[]}]},{"level":2,"title":"一些注意","slug":"一些注意","link":"#一些注意","children":[{"level":3,"title":"IFD","slug":"ifd","link":"#ifd","children":[]},{"level":3,"title":"依赖版本","slug":"依赖版本","link":"#依赖版本","children":[]},{"level":3,"title":"引用泄露","slug":"引用泄露","link":"#引用泄露","children":[]}]}],"git":{"createdTime":1696961467000,"updatedTime":1698077620000,"contributors":[{"name":"OpenTritium","email":"tritium404@hotmail.com","commits":1},{"name":"oluceps","email":"i@oluceps.uk","commits":1}]},"readingTime":{"minutes":18.37,"words":5512},"filePathRelative":"tutorials/env/dev/haskell.md","localizedDate":"2023年10月10日","excerpt":"<h2>Nixpkgs 中的 Haskell 基础设施</h2>\\n<p>除了软件开发过程本身外，软件分发也是很重要的一个话题。在发行版上建立编程语言生态系统可能不是一件简单的事情。本文将引入 <a href=\\"https://github.com/NixOS/nixpkgs\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">NixOS/nixpkgs</a><br>\\n中 Haskell 相关的基础知识，并说明如何使用 Nix 搭建科学的 Haskell 开发环境。</p>\\n<h2>Haskell 开发工具</h2>\\n<h3>编译器</h3>\\n<p>在进入 Nix 相关的话题之前，有必要介绍一下现在 Haskell 的工具链以及常用的包管理器。首先 GHC 多年来已经成为 Haskell<br>\\n编译器的业界标准——其他编译器譬如 JHC、GHC-JS、UHC 等等通常只实现了很基础的 Haskell 语言（例如 Haskell<br>\\n2010）。它们的开发重点可能在提供不同的后端支持或者极致优化性能，总之并不是为了生产准备的。因此，对于发行版而言一般来说分发<br>\\nHaskell 软件意味着使用 GHC 作为编译器。</p>"}');export{da as comp,ra as data};
