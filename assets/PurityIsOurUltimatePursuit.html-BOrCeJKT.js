import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as s,o as t}from"./app-BeHvSpB3.js";const i={};function o(p,n){return t(),e("div",null,[...n[0]||(n[0]=[s(`<h1 id="纯净是我们的至高追求" tabindex="-1"><a class="header-anchor" href="#纯净是我们的至高追求"><span>纯净是我们的至高追求</span></a></h1><h2 id="整个构建系统并不是绝对纯净" tabindex="-1"><a class="header-anchor" href="#整个构建系统并不是绝对纯净"><span>整个构建系统并不是绝对纯净</span></a></h2><p>我们前面一直在强调，NixOS 的生态系统有多函数式，好吧的确是有非常多的函数，但是这些函数似乎并不纯净。这些都要从整个函数机器的齿轮 —— Nix 文件说起。</p><p>为了设计一个纯净的函数，我们应该尽量地把它设计得封闭，使之隔离外部环境。但是 Nix 并不是这样，Nix 为了编译那些 Nix 文件，依然需要访问到外部世界的东西。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Nix 文件可以访问任意文件（如 <code>~/.config/nixpkgs/config.nix</code>）、环境变量、Git仓库、Nix搜索路径（<code>$NIX_PATH</code>）中的文件、命令行参数（<code>--arg</code>）以及系统类型（<code>builtins.currentSystem</code>）。</p></div><p>这就意味着这个函数的求值过程并不完全封闭。如果你在两台不同的机器上运行相同的 Nix 表达式，可能会得到不同的结果，因为这两台机器上的环境变量或文件系统可能是不同的。<mark>所以我们建议尽量避开任何带有路径依赖的写法。</mark></p><p>但是这样做并不能完全解决问题，因为 Nix 文件本身就是一个路径依赖（当你使用 import 函数来引入其他 Nix 文件时，你必须指定一个相对或绝对路径）这就导致了一个问题：如果你想把你的 Nix 项目分享给别人，你必须保证他们能够找到你引用的所有文件。这就需要你把所有相关的文件都打包成一个压缩文件或者上传到一个 Git 仓库，并且告诉别人如何正确地使用它们。</p><p>这显然是很麻烦的，而且也违背了函数式编程的原则。<mark>我们希望能够用一种更简单和优雅的方式来管理和共享我们的 Nix 项目，而不需要关心它们所依赖的具体路径。</mark></p><h2 id="我们好像漏掉了什么细节" tabindex="-1"><a class="header-anchor" href="#我们好像漏掉了什么细节"><span>我们好像漏掉了什么细节</span></a></h2><p>在前面的章节中，我们还一直试图给阅读者灌输 “NixOS” 只要靠配置文件就能复现系统的理念？但是事实果真是这样吗，让我们回溯一下：不变的函数之所以能有不变的输出，是因为有不变的输入。<mark>输入果真是一成不变的吗？</mark></p><p>我们以最大的输入 pkgs 举例，这个输入指代的是 Nix 包管理器的软件仓库 Nixpkgs，里面有数不尽的包（Nixpkgs 是事实上最大的单体包仓库）日日夜夜在提交与修改，导致 nixpkgs 一直处于 unstable 状态。与之俱来的是 options 也经常变动，这意味着你的配置文件可能对旧版包是生效的，但是新版包的 options 变动了，现在又无效了。</p><p>你会如何解决这个由依赖版本与配置不匹配的问题呢？答案是现在很多语言的包管理（比如 Cargo，pnpm）都采用的版本锁定。本网站的就是被 pnpm 管理着依赖，你可以访问本站源代码仓库，根目录下有个叫做 <code>pnpm-lock.yaml</code> 的文件，里面描述了各依赖互相兼容的版本。每次更新依赖时，<mark>包管理器会在尽可能让依赖版本比较新的条件下保持最大兼容</mark>，并更新 Lock 文件。</p><p>于是我们怀着两个需求：</p><ul><li>尽量排除 Nix 文件互相引用时对本地文件系统路径的依赖</li><li>控制输入的版本，从而达到输出的可预期性</li><li>将 Nix 项目组织成一种易管理的形式</li></ul><p>于是 Flakes 诞生了！</p><h2 id="终极解决方案-flakes" tabindex="-1"><a class="header-anchor" href="#终极解决方案-flakes"><span>终极解决方案 Flakes</span></a></h2><p>Flakes 是 Nix 2.4 版本引入的一个新特性，它可以让你用一种声明式和纯净的方式来定义和使用 Nix 项目。Flakes 使用了一种 Flake 引用的方式来代替文件系统路径，URL 等。Flake 引用大致就是下面的用法：</p><ul><li><p>类 URL 句法，例如 <code>github:NixOS/nixpkgs</code> 表示 Github 托管平台上一个叫做 <code>NixOS</code> 用户的 <code>nixpkgs</code> 仓库。这与裸 URL 不同，要是哪天 Github 域名搬家了，也不用你批量替换 URL，只需要等 Nix 更新 Flakes 引用的解析规则就成。</p></li><li><p>类路径句法，比如 <code>/absolute/path/to/the/Flakes</code> 和<code>./relative/path/to/the/Flakes</code>。你可能就会疑惑，这不就是平时的相对路径与绝对路径写法吗，究竟“类”在哪里了呢？“类”在这种引用既可能指向一个本地文件系统路径，也可能指向一个本地 Git 仓库。如果你的 URL 指向一个本地的 Git 仓库，它就会在 <code>flake.lock</code> 里面记录当前仓库的 commit hash，这就保证了输入的版本是不变的。那你又问，万一我要引入的目录没有版本控制呢？那我只能说你自己人工去保证输入的这个目录的内容是不变的吧。</p></li></ul><p>为了保证输入的可获取性，我们一般用网络上的仓库作为输入，因为只要有网络，我们就能获得相同的输入。而使用本地文件系统路径作为输入则不然，我们很难保证每台主机的相应文件系统路径下都有一样的文件。因此，我们的建议是更多地依赖网络上的输入，除非你有一些隐私信息，才有必要使用本地文件系统输入。</p><div class="language-nix line-numbers-mode" data-ext="nix" data-title="nix"><pre class="language-nix"><code><span class="token punctuation">{</span>
  description <span class="token operator">=</span> <span class="token string">&quot;A simple Flakes&quot;</span><span class="token punctuation">;</span>

  inputs<span class="token punctuation">.</span>nixpkgs<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&quot;github:NixOS/nixpkgs/nixos-unstable&quot;</span><span class="token punctuation">;</span>

  outputs <span class="token operator">=</span> <span class="token punctuation">{</span> self<span class="token punctuation">,</span> nixpkgs <span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    packages<span class="token punctuation">.</span>x86_64<span class="token operator">-</span>linux<span class="token punctuation">.</span>hello <span class="token operator">=</span>
      <span class="token keyword">with</span> nixpkgs<span class="token punctuation">.</span>legacyPackages<span class="token punctuation">.</span>x86_64<span class="token operator">-</span>linux<span class="token punctuation">;</span>
      stdenv<span class="token punctuation">.</span>mkDerivation <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
        src <span class="token operator">=</span> hello<span class="token punctuation">.</span>src<span class="token punctuation">;</span>
        buildInputs <span class="token operator">=</span> <span class="token punctuation">[</span> gcc <span class="token punctuation">]</span><span class="token punctuation">;</span>
        installPhase <span class="token operator">=</span> <span class="token string">&#39;&#39;
          mkdir -p $out/bin
          echo &quot;Hello, world!&quot; &gt; $out/bin/hello
          chmod +x $out/bin/hello
        &#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="钉住版本" tabindex="-1"><a class="header-anchor" href="#钉住版本"><span>钉住版本</span></a></h2><p>当你在 <code>Flakes.nix</code> 文件中指定了一个 Flakes引用（例如<code>github:NixOS/nixpkgs/nixos-unstable</code>）后，Nix会在第一次运行 <code>nix build</code> 或其他 Nix 命令时会生成一个 <code>flake.lock</code> 文件。这个文件会记录下所有输入 Flakes 的具体版本（例如，Git 提交哈希）。有了版本锁，你什么时候构建，都是会根据 <code>flake.lock</code> 文件来确认依赖版本，使得构建结果也与之前并无二致。</p><p>如果你想更新到最新的提交，你可以运行 <code>nix flake update</code> 命令。这个命令会去更新输入，并重新钉住最新输入的版本</p>`,23)])])}const r=a(i,[["render",o],["__file","PurityIsOurUltimatePursuit.html.vue"]]),u=JSON.parse('{"path":"/tutorials/concept/PurityIsOurUltimatePursuit.html","title":"纯净是我们的至高追求","lang":"zh-CN","frontmatter":{"description":"纯净是我们的至高追求 整个构建系统并不是绝对纯净 我们前面一直在强调，NixOS 的生态系统有多函数式，好吧的确是有非常多的函数，但是这些函数似乎并不纯净。这些都要从整个函数机器的齿轮 —— Nix 文件说起。 为了设计一个纯净的函数，我们应该尽量地把它设计得封闭，使之隔离外部环境。但是 Nix 并不是这样，Nix 为了编译那些 Nix 文件，依然需要...","head":[["meta",{"property":"og:url","content":"https://nixos-cn.github.io/tutorials/concept/PurityIsOurUltimatePursuit.html"}],["meta",{"property":"og:site_name","content":"NixOS 中文"}],["meta",{"property":"og:title","content":"纯净是我们的至高追求"}],["meta",{"property":"og:description","content":"纯净是我们的至高追求 整个构建系统并不是绝对纯净 我们前面一直在强调，NixOS 的生态系统有多函数式，好吧的确是有非常多的函数，但是这些函数似乎并不纯净。这些都要从整个函数机器的齿轮 —— Nix 文件说起。 为了设计一个纯净的函数，我们应该尽量地把它设计得封闭，使之隔离外部环境。但是 Nix 并不是这样，Nix 为了编译那些 Nix 文件，依然需要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-05T13:58:51.000Z"}],["meta",{"property":"article:author","content":"NixOS-CN"}],["meta",{"property":"article:modified_time","content":"2024-07-05T13:58:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"纯净是我们的至高追求\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-05T13:58:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"NixOS-CN\\",\\"url\\":\\"https://github.com/nixos-cn\\"}]}"]]},"headers":[{"level":2,"title":"整个构建系统并不是绝对纯净","slug":"整个构建系统并不是绝对纯净","link":"#整个构建系统并不是绝对纯净","children":[]},{"level":2,"title":"我们好像漏掉了什么细节","slug":"我们好像漏掉了什么细节","link":"#我们好像漏掉了什么细节","children":[]},{"level":2,"title":"终极解决方案 Flakes","slug":"终极解决方案-flakes","link":"#终极解决方案-flakes","children":[]},{"level":2,"title":"钉住版本","slug":"钉住版本","link":"#钉住版本","children":[]}],"git":{"createdTime":1697224677000,"updatedTime":1720187931000,"contributors":[{"name":"OpenTritium","email":"tritium404@hotmail.com","commits":4},{"name":"Ryan Yin","email":"xiaoyin_c@qq.com","commits":2},{"name":"Tatooi Noyo","email":"tatooi.noyo@outlook.com","commits":2}]},"readingTime":{"minutes":5.31,"words":1594},"filePathRelative":"tutorials/concept/PurityIsOurUltimatePursuit.md","localizedDate":"2023年10月13日","autoDesc":true,"excerpt":"\\n<h2>整个构建系统并不是绝对纯净</h2>\\n<p>我们前面一直在强调，NixOS 的生态系统有多函数式，好吧的确是有非常多的函数，但是这些函数似乎并不纯净。这些都要从整个函数机器的齿轮 —— Nix 文件说起。</p>\\n<p>为了设计一个纯净的函数，我们应该尽量地把它设计得封闭，使之隔离外部环境。但是 Nix\\n并不是这样，Nix 为了编译那些 Nix 文件，依然需要访问到外部世界的东西。</p>\\n<!-- prettier-ignore -->\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>Nix 文件可以访问任意文件（如 <code>~/.config/nixpkgs/config.nix</code>）、环境变量、Git仓库、Nix搜索路径（<code>$NIX_PATH</code>）中的文件、命令行参数（<code>--arg</code>）以及系统类型（<code>builtins.currentSystem</code>）。</p>\\n<!-- prettier-ignore -->\\n</div>"}');export{r as comp,u as data};
